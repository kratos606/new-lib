(function(){"use strict";try{if(typeof document<"u"){var o=document.createElement("style");o.appendChild(document.createTextNode(`.ardisplay-modal-overlay{position:fixed;top:0;right:0;bottom:0;left:0;width:100%;height:100%;background:#0009;display:none;justify-content:center;align-items:center;z-index:9990;backdrop-filter:blur(5px);-webkit-backdrop-filter:blur(5px)}.ardisplay-qr-modal .ardisplay-modal-dialog.qr-modal-dialog-content{width:80%;max-width:820px;max-height:90vh;overflow:hidden;display:flex;flex-direction:row;background-color:#fefefe;border-radius:12px;box-shadow:0 8px 24px #0003;position:relative;transform:translateY(20px);transition:transform .3s ease;font-family:sans-serif;box-sizing:border-box}.ardisplay-modal-overlay.visible .ardisplay-modal-dialog{transform:translateY(0)}@media (max-width: 768px){.ardisplay-qr-modal .ardisplay-modal-dialog.qr-modal-dialog-content{flex-direction:column;width:90%;max-height:85vh;overflow-y:auto}.qr-modal-text-section,.qr-modal-image-section{width:100%!important;height:auto!important;padding:20px!important}.qr-modal-image-section{order:-1;max-height:40vh}}.qr-modal-body{display:flex;flex-direction:inherit;width:100%;height:100%;overflow:hidden}.qr-modal-text-section{width:50%;height:100%;display:flex;flex-direction:column;align-items:center;justify-content:center;padding:30px;overflow-y:auto;box-sizing:border-box}.qr-modal-title{margin-top:0;margin-bottom:16px;color:#333;font-size:1.6em;font-weight:600}.qr-modal-description{margin-bottom:24px;color:#555;font-size:1em;line-height:1.5}.qr-code-container{display:flex;justify-content:center;align-items:center;width:100%;min-height:180px}.qr-code-target{display:flex;justify-content:center;align-items:center;padding:15px;border-radius:8px;background-color:#f8f8f8;box-shadow:0 2px 6px #0000000d}.qr-code-placeholder,.qr-error{font-size:.9em;color:#888;text-align:center}.qr-error{color:#d9534f;display:flex;flex-direction:column;align-items:center}.qr-retry-button{margin-top:10px;padding:6px 12px;background-color:#6c757d;color:#fff;border:none;border-radius:4px;cursor:pointer;font-size:.9em}.qr-retry-button:hover{background-color:#5a6268}.qr-code-loading{display:flex;flex-direction:column;align-items:center;justify-content:center}.qr-code-spinner{width:30px;height:30px;border:3px solid #f3f3f3;border-top:3px solid #3498db;border-radius:50%;animation:spin 1s linear infinite;margin-bottom:10px}@keyframes spin{0%{transform:rotate(0)}to{transform:rotate(360deg)}}.qr-modal-image-section{width:50%;align-self:stretch;flex-grow:0;flex-shrink:0;display:flex;justify-content:center;align-items:center;background-color:#f5f5f5;overflow:hidden;border-top-right-radius:12px;border-bottom-right-radius:12px;box-sizing:border-box}.qr-modal-poster{display:block;width:100%;height:100%;object-fit:contain;object-position:center}.qr-modal-poster-placeholder{width:80%;height:80%;background-color:#e6e6e6;border-radius:8px;display:flex;align-items:center;justify-content:center;color:#999;font-size:.9em;position:relative}.qr-modal-poster-placeholder:before{content:"No Image Available"}.qr-modal-poster-placeholder:after{content:"";position:absolute;top:50%;left:50%;transform:translate(-50%,-70%);width:60px;height:60px;background-image:url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='%23bbb' viewBox='0 0 24 24'%3E%3Cpath d='M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z'/%3E%3C/svg%3E");background-size:contain;background-repeat:no-repeat}.ardisplay-modal-close-button{position:absolute;top:12px;right:12px;z-index:10;width:36px;height:36px;border-radius:50%;background-color:#fff;border:none;cursor:pointer;display:flex;align-items:center;justify-content:center;font-size:24px;color:#555;box-shadow:0 2px 5px #0000001a;transition:all .2s ease}.ardisplay-modal-close-button:hover{background-color:#f0f0f0;color:#333;transform:scale(1.05)}.ardisplay-modal-close-button:focus{outline:2px solid #3498db;outline-offset:2px}.ardisplay-steps-modal-overlay{z-index:9998}.ardisplay-modal-overlay-bg{position:fixed;top:0;left:0;width:100%;height:100%;background:#0009;backdrop-filter:blur(8px);-webkit-backdrop-filter:blur(8px);z-index:-1}.steps-overlay-close-button{position:fixed;top:15px;right:15px;width:36px;height:36px;color:#fff;background-color:#0000004d;border-radius:50%;border:none;display:flex;justify-content:center;align-items:center;cursor:pointer;transition:background-color .2s ease;z-index:10}.steps-overlay-close-button:hover{background-color:#00000080}.steps-overlay-close-button svg{width:24px;height:24px}.ardisplay-steps-modal-dialog{position:fixed;bottom:0;left:50%;transform:translate(-50%);width:calc(100% - 1rem);height:auto;max-height:75vh;background-color:#ffffffd9;-webkit-backdrop-filter:blur(15px);backdrop-filter:blur(15px);z-index:9999;border-radius:10px;display:flex;flex-direction:column;overflow:hidden;padding:15px;box-sizing:border-box}@media (min-width: 600px){.ardisplay-steps-modal-dialog{left:50%;transform:translate(-50%);bottom:1rem;width:90%;max-width:500px;border-radius:16px;max-height:80vh}}.ardisplay-steps-modal-content{display:flex;flex-direction:column;padding:16px;flex-grow:1;overflow-y:auto}.ardisplay-steps-header{display:flex;flex-direction:row;width:60%;gap:8px;margin:0 auto 16px;flex-shrink:0}.ardisplay-step-indicator{height:4px;background:#ccc;border-radius:2px;flex:1;transition:background-color .3s ease}.ardisplay-step-indicator.active{background:#000}.ardisplay-steps-body{display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center;flex-grow:1}.ardisplay-instructions-title{font-size:1.25em;font-weight:600;font-family:sans-serif;line-height:1.4;margin-bottom:12px;color:#333}.ardisplay-steps-gif{width:100%;height:auto;max-height:40vh;object-fit:contain;border-radius:12px;margin-bottom:16px;background-color:#eee}.ardisplay-instructions-body{display:flex;align-items:center;font-size:16px;line-height:1.5;color:#272727;margin:10px 0;text-align:justify;font-family:sans-serif}.ardisplay-steps-footer{display:flex;flex-direction:column;align-items:center;gap:10px;padding-top:16px;border-top:1px solid rgba(0,0,0,.1);width:100%;flex-shrink:0}.ardisplay-multi-button{all:unset;box-sizing:border-box;padding-block:.5rem;cursor:pointer;height:45px;border-radius:10px;flex-shrink:0;font-weight:700;font-size:1em;width:80%;max-width:300px;font-family:sans-serif;text-align:center;transition:background-color .2s ease,transform .1s ease}.ardisplay-multi-button:active{transform:scale(.98)}.ardisplay-next-button,.ardisplay-view-wall-button{background-color:#000!important;color:#fff}.ardisplay-next-button:hover,.ardisplay-view-wall-button:hover{background-color:#333!important}.ardisplay-view-wall-button{display:inline-flex;align-items:center;justify-content:center;gap:8px}.ardisplay-view-wall-button svg{width:20px;height:20px;fill:#fff;stroke:#fff}.ardisplay-skip-button{background:transparent;color:#888;text-decoration:underline;font-weight:500}.ardisplay-skip-button:hover{color:#444}.ardisplay-steps-body .step-specific-content{width:100%;margin-bottom:16px;display:flex;flex-direction:column;gap:16px}.modal-selector-title{font-size:.9em;font-weight:500;color:#555;margin-bottom:8px;text-align:left}.modal-variants-container{width:100%}.modal-variant-slides{display:flex;overflow-x:auto;overflow-y:hidden;padding-bottom:8px;gap:10px;-webkit-overflow-scrolling:touch;scrollbar-width:thin;scrollbar-color:#ccc #f0f0f0}.modal-variant-slides::-webkit-scrollbar{height:6px}.modal-variant-slides::-webkit-scrollbar-thumb{background-color:#ccc;border-radius:3px}.modal-variant-slide{all:unset;box-sizing:border-box;flex-shrink:0;width:72px;height:72px;background-color:#f0f0f0;border:2px solid transparent;border-radius:8px;cursor:pointer;background-position:center;background-size:cover;transition:border-color .2s ease,box-shadow .2s ease;display:flex;align-items:center;justify-content:center;font-size:.8em;color:#555}.modal-variant-slide.selected{border-color:#007aff;box-shadow:0 0 0 2px #007aff4d}.modal-sizes-container{width:100%}.modal-size-buttons{display:flex;flex-direction:column;gap:8px}.modal-size-button{all:unset;box-sizing:border-box;border:1.5px solid #ddd;border-radius:6px;padding:8px 12px;background-color:#fff;font-size:.85em;color:#444;cursor:pointer;display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;transition:border-color .2s ease,background-color .2s ease;min-height:50px}.modal-size-button.selected{border-color:#007aff;background-color:#007aff14;color:#007aff;font-weight:600}.modal-size-button span{display:block}.modal-size-button .size-label{font-weight:500}.modal-size-button .size-description{font-size:.8em;color:#777;margin-top:2px}.modal-size-button.selected .size-description{color:#007aff}.ardisplay-steps-body .ardisplay-instructions-body{display:block}.ardisplay-steps-footer .ardisplay-next-button:disabled{background-color:#ccc!important;color:#888;cursor:not-allowed}.ardisplay-progress-content{position:relative;text-align:center;font-family:sans-serif;color:#fff;background-color:#0000004d;padding:20px 30px;border-radius:8px}.ardisplay-progress-text{margin-bottom:16px;font-size:1.1em}.ardisplay-progress-bar{width:200px;background:transparent;border:2px solid white;border-radius:4px;overflow:hidden;height:8px}.ardisplay-progress-bar-fill{width:0;height:100%;background:#fff;transition:width .2s linear}.ardisplay-progress-modal .ardisplay-modal-close-button{color:#fff}.model-viewer-wrapper{position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);width:calc(100% - 96px);height:calc(100% - 96px);background-color:#fff;display:flex;flex-direction:row;z-index:999}.ardisplay-close-button{position:absolute;top:10px;right:10px;background:none;border:none;cursor:pointer;padding:0}.ardisplay-close-button svg{width:24px;height:24px;fill:#000}.ardisplay-model-viewer-overlay{content:"";position:fixed;top:50%;left:50%;transform:translate(-50%,-50%);width:100%;height:100%;background-color:#00000080;z-index:10;display:none}.ardisplay-details-panel{width:400px;height:100%;background-color:#fff;display:flex;flex-direction:column;padding-block:1rem;padding-top:50px;box-sizing:border-box}@media only screen and (max-width: 900px){.model-viewer-wrapper{width:100%;height:calc(100% - 48px);transform:translate(-50%);top:48px}.ardisplay-details-panel{display:none!important}.ardisplay-model-viewer-overlay{top:-48px}.ardisplay-qr-code-button{display:flex!important}}.ardisplay-details-panel{display:flex}.ardisplay-qr-code-button{all:unset;position:absolute;display:none;top:10px;right:50%;transform:translate(50%);background:#fff;cursor:pointer;padding:10px;z-index:1000;align-items:center;justify-content:center;gap:10px;white-space:nowrap}.ardisplay-show{display:flex!important}.model-viewer-popup-container model-viewer{width:100%;height:100%}.ar-display-custom-panel{flex:1;display:block!important}.ardisplay-popup-ar-button{all:unset;position:absolute;top:10px;right:50%;transform:translate(50%);background:#fff;cursor:pointer;padding:10px;z-index:1000;align-items:center;justify-content:center;gap:10px;white-space:nowrap;font-family:sans-serif;display:none}@media only screen and (max-width: 900px){.ardisplay-popup-ar-button{display:flex}}`)),document.head.appendChild(o)}}catch(e){console.error("vite-plugin-css-injected-by-js",e)}})();
const Fe = "https://ardisplaybridge.vercel.app", be = "https://cdn.ardisplay.net", Ve = "https://www.ardisplay.net/api", Me = {
  GET_MODEL_BY_ID: `${Ve}/3d-model`,
  GET_MODEL_BY_STORE_ID: `${Ve}/3d-model/store`,
  GET_MODEL_BY_URL: `${Ve}/3d-model`,
  SEND_STATS: "https://www.ardisplay.net/api/stats"
}, Ne = {
  ENABLE_STATS_LOGGING: !0,
  USE_ASSET_CACHE: !0
}, De = 3, je = 500, p = {
  debug: (...S) => {
  },
  error: (...S) => {
    console.error("[ARDisplayViewer ERROR]", ...S);
  },
  warn: (...S) => {
  }
}, Ue = (S) => {
  try {
    return btoa(S);
  } catch (e) {
    return console.error("Base64 encoding failed:", e), null;
  }
}, Qe = (S) => {
  try {
    return atob(S);
  } catch (e) {
    return console.error("Base64 decoding failed:", e), null;
  }
};
class Xe {
  /**
   * Fetches model data based on provided attributes (src, shopify-src, or current URL).
   * Retries the request on transient failures but NEVER falls back to default data.
   * @param {object} attributes
   * @param {string} [attributes.src]         - Direct model ID.
   * @param {string} [attributes.shopifySrc]  - Shopify product ID.
   * @param {boolean} [attributes.useUrl=true]- Use window.location.href as lookup key.
   * @returns {Promise<object>}               - Resolves with validated model data.
   * @throws {Error}                          - Throws on any unrecoverable problem.
   */
  async getModelData(e = {}) {
    const { src: t, shopifySrc: n, useUrl: l = !0 } = e;
    let h, b;
    if (t)
      h = `${Me.GET_MODEL_BY_ID}?id=${t}`, b = "by ID";
    else if (n)
      h = `${Me.GET_MODEL_BY_STORE_ID}?storeProductId=${n}`, b = "by Shopify ID";
    else if (l)
      try {
        let A = window.location.href.replace(/\/$/, "");
        const L = Ue(A);
        if (L)
          h = `${Me.GET_MODEL_BY_URL}?url=${L}`, b = "by URL";
        else
          throw new Error("Failed to base-64 encode current URL.");
      } catch (A) {
        throw p.error("Unable to derive a model-lookup URL:", A), A;
      }
    if (!h)
      throw new Error("No valid source given (src, shopifySrc, or URL).");
    let _ = 0, E;
    for (; _ < De; ) {
      _++;
      try {
        const A = await fetch(h);
        if (!A.ok)
          throw new Error(
            `HTTP ${A.status} ${A.statusText}`
          );
        const L = await A.json();
        if (this.isValidModelData(L)) {
          E = L, p.debug(`Successfully obtained model data (attempt ${_}).`);
          break;
        }
        throw new Error("Invalid data structure received.");
      } catch (A) {
        if (p.error(`Attempt ${_} failed: ${A.message}`), _ >= De)
          throw p.error("Maximum retries reached—aborting."), A;
        await new Promise((L) => setTimeout(L, je));
      }
    }
    return this.prepareData(E);
  }
  /**
   * Quick structural sanity-check for incoming data.
   * Keep it strict; we won’t silently fix things anymore.
   */
  isValidModelData(e) {
    return e && typeof e == "object" && Array.isArray(e.options) && e.options.length > 0 && e.options.every(
      (t) => typeof t == "object" && t.url && Array.isArray(t.sizes) && t.sizes.length > 0
    ) && typeof e.arBtn == "object" && typeof e.qrCode == "object";
  }
  /**
   * Minimal massaging—mainly ensures `placement` is available.
   * No merging with defaults.
   */
  prepareData(e) {
    var t;
    if (!e)
      throw new Error("prepareData called with empty payload.");
    return e.placement || (e.placement = ((t = e.options[0]) == null ? void 0 : t.placement) ?? null), e;
  }
}
const Ye = new Xe(), V = (S, e = {}) => {
  const t = document.createElement(S);
  return e.classList && e.classList.forEach((n) => t.classList.add(n)), e.textContent && (t.textContent = e.textContent), e.attributes && Object.entries(e.attributes).forEach(([n, l]) => {
    t.setAttribute(n, l);
  }), e.style && Object.entries(e.style).forEach(([n, l]) => {
    const h = n.replace(/([A-Z])/g, "-$1").toLowerCase();
    t.style.setProperty(h, l);
  }), t;
};
function Le(S, e = document.body) {
  return S instanceof Node ? e instanceof HTMLElement ? (e.appendChild(S), S) : (console.error("Invalid container passed to createPortal:", e), document.body.appendChild(S), S) : (console.error("Invalid element passed to createPortal:", S), null);
}
const $e = (S, e = !1) => {
  if (!S || !S.options || S.options.length === 0)
    return p.error("viewerWrapperTemplate: Invalid modelData provided."), '<div class="ardisplay-error">Missing model data for viewer.</div>';
  const t = S.options[0], n = (t == null ? void 0 : t.placement) || S.placement || "floor", l = S.shadow !== void 0 ? S.shadow : 1, h = (t == null ? void 0 : t.posterFileUrl) || S.poster || null;
  return `
        <model-viewer
            class="ardisplay-model-viewer"
            src="${t.url}"
            ${h ? `poster="${h}"` : ""}
            ar
            ar-modes="webxr scene-viewer quick-look"
            ar-placement="${n}"
            ar-scale="fixed"
            shadow-intensity="${l}"
            camera-controls
            disable-pan
            disable-tap
        >
            <slot name="custom-ui"></slot>
            <slot name="progress-bar"></slot>
        </model-viewer>
    `;
}, Ke = ".ardisplay-inpage-button{position:absolute;top:10px;right:50%;transform:translate(50%);cursor:pointer;padding:10px;z-index:1000;display:flex;align-items:center;justify-content:center;gap:10px;box-sizing:border-box;outline:none;border:none}", Ze = (S, e = !1) => {
  const t = (S == null ? void 0 : S.arBtn) || {}, n = ["ardisplay-qr-code-button"];
  e && n.push("ardisplay-full-width");
  const l = t.btnIcon ? `<span data-lucide="${t.btnIcon}" class="ardisplay-button-icon"></span>` : "", h = t.btnText || "View in your space", b = $e(S, !0);
  return `
        <div class="ardisplay-inpage-container" style="direction: ltr; position: relative; width: 100%; height: 100%;">
             ${`<style>${Ke}</style>`}    
             ${b}
             <button slot="custom-ui" class="${n.join(
    " "
  )} ardisplay-inpage-button" type="button">
                 ${l}
                 <span class="ardisplay-button-text">${h}</span>
             </button>
        </div>
    `;
};
let Ie = !1, ge = null;
async function Ae() {
  return Ie || window.customElements.get("model-viewer") ? Promise.resolve() : ge || (ge = (async () => {
    try {
      await import("./model-viewer-module.min-CBqJlA9B.js"), p.debug(
        "ModelViewer component loaded successfully via dynamic import()."
      ), Ie = !0, ge = null, await new Promise((S) => setTimeout(S, 0)), window.customElements.get("model-viewer") || p.warn(
        "ModelViewer loaded, but custom element registration seems delayed or failed."
      );
    } catch (S) {
      throw p.error(
        "Failed to load ModelViewer component via dynamic import():",
        S
      ), Ie = !1, ge = null, S;
    }
  })(), ge);
}
/**
 * @license lucide v0.488.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const We = [
  ["rect", { width: "7", height: "7", x: "14", y: "3", rx: "1" }],
  [
    "path",
    {
      d: "M10 21V8a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-5a1 1 0 0 0-1-1H3"
    }
  ]
];
/**
 * @license lucide v0.488.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Ge = [
  [
    "path",
    {
      d: "M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z"
    }
  ],
  ["path", { d: "m3.3 7 8.7 5 8.7-5" }],
  ["path", { d: "M12 22V12" }]
];
/**
 * @license lucide v0.488.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const Je = [
  [
    "path",
    {
      d: "M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0"
    }
  ],
  ["circle", { cx: "12", cy: "12", r: "3" }]
];
/**
 * @license lucide v0.488.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const et = [
  ["path", { d: "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" }],
  ["path", { d: "M14 2v4a2 2 0 0 0 2 2h4" }],
  ["path", { d: "m8 18 4-4" }],
  ["path", { d: "M8 10v8h8" }]
];
/**
 * @license lucide v0.488.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const tt = [
  [
    "path",
    {
      d: "M16.466 7.5C15.643 4.237 13.952 2 12 2 9.239 2 7 6.477 7 12s2.239 10 5 10c.342 0 .677-.069 1-.2"
    }
  ],
  ["path", { d: "m15.194 13.707 3.814 1.86-1.86 3.814" }],
  [
    "path",
    {
      d: "M19 15.57c-1.804.885-4.274 1.43-7 1.43-5.523 0-10-2.239-10-5s4.477-5 10-5c4.838 0 8.873 1.718 9.8 4"
    }
  ]
];
/**
 * @license lucide v0.488.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const it = [
  ["path", { d: "M3 7V5a2 2 0 0 1 2-2h2" }],
  ["path", { d: "M17 3h2a2 2 0 0 1 2 2v2" }],
  ["path", { d: "M21 17v2a2 2 0 0 1-2 2h-2" }],
  ["path", { d: "M7 21H5a2 2 0 0 1-2-2v-2" }]
];
/**
 * @license lucide v0.488.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */
const st = [
  ["circle", { cx: "18", cy: "5", r: "3" }],
  ["circle", { cx: "6", cy: "12", r: "3" }],
  ["circle", { cx: "18", cy: "19", r: "3" }],
  ["line", { x1: "8.59", x2: "15.42", y1: "13.51", y2: "17.49" }],
  ["line", { x1: "15.41", x2: "8.59", y1: "6.51", y2: "10.49" }]
], nt = {
  eye: Je,
  blocks: We,
  rotate3d: tt,
  box: Ge,
  fileaxis3d: et,
  scan: it,
  share2: st
};
function we(S) {
  if (!S || typeof S.querySelectorAll != "function")
    return;
  S.querySelectorAll("[data-lucide]").forEach((t) => {
    var h;
    const n = (h = t.getAttribute("data-lucide")) == null ? void 0 : h.toLowerCase();
    if (!n) return;
    const l = nt[n];
    if (l) {
      const b = t.getAttribute("width") || 24, _ = t.getAttribute("color") || "currentColor", E = t.getAttribute("stroke-width") || "2", A = document.createElementNS("http://www.w3.org/2000/svg", "svg");
      A.setAttribute("xmlns", "http://www.w3.org/2000/svg"), A.setAttribute("width", b), A.setAttribute("height", b), A.setAttribute("viewBox", "0 0 24 24"), A.setAttribute("fill", "none"), A.setAttribute("stroke", _), A.setAttribute("stroke-width", E), A.setAttribute("stroke-linecap", "round"), A.setAttribute("stroke-linejoin", "round"), t.classList.forEach((L) => A.classList.add(L)), A.setAttribute("style", t.getAttribute("style") || ""), Array.from(t.attributes).forEach((L) => {
        [
          "data-lucide",
          "width",
          "height",
          "color",
          "stroke-width",
          "class",
          "style"
        ].includes(L.name) || A.setAttribute(L.name, L.value);
      }), l && Array.isArray(l) && l.forEach((L) => {
        if (!Array.isArray(L) || L.length < 2) return;
        const [D, X] = L, I = document.createElementNS(
          "http://www.w3.org/2000/svg",
          D
        );
        typeof X == "object" && X !== null && Object.entries(X).forEach(([B, k]) => {
          I.setAttribute(B, k);
        }), A.appendChild(I);
      }), t.parentNode && t.parentNode.replaceChild(A, t);
    }
  });
}
const ot = (S) => {
  var l;
  if (!S || !S.options || S.options.length === 0)
    return p.error("qrModalContentTemplate: Invalid modelData."), '<p class="ardisplay-error">Error loading modal content.</p>';
  const e = "Scan QR Code", t = "View this product in your environment by scanning this code.", n = ((l = S.options[0]) == null ? void 0 : l.posterFileUrl) || "";
  return `
    <div class="qr-modal-body">
        <div class="qr-modal-text-section">
            <h2 class="qr-modal-title">${e}</h2>
            <p class="qr-modal-description" data-translate-id="qrcode-info">${t}</p>
            <div class="qr-code-container">
                <div class="qr-code-target" id="qr-code-modal-target" style="display:flex;flex-direction:column;">
                    <!-- QR code will be generated here by QRCodeService -->
                    <div class="qr-code-placeholder">Generating QR Code...</div>
                </div>
            </div>
        </div>
        <div class="qr-modal-image-section">
            <img src="${n}" alt="${e} Poster" class="qr-modal-poster" style="display: none;" />
            <div class="qr-modal-poster-placeholder"></div>
        </div>
    </div>
  `;
};
function at(S) {
  return S && S.__esModule && Object.prototype.hasOwnProperty.call(S, "default") ? S.default : S;
}
var ze = { exports: {} }, rt = ze.exports, Re;
function lt() {
  return Re || (Re = 1, function(S, e) {
    (function(t, n) {
      S.exports = n();
    })(rt, () => (() => {
      var t = { 873: (b, _) => {
        var E, A, L = function() {
          var D = function(v, y) {
            var m = v, s = Y[y], i = null, a = 0, r = null, o = [], u = {}, C = function(d, g) {
              i = function(c) {
                for (var f = new Array(c), w = 0; w < c; w += 1) {
                  f[w] = new Array(c);
                  for (var P = 0; P < c; P += 1) f[w][P] = null;
                }
                return f;
              }(a = 4 * m + 17), x(0, 0), x(a - 7, 0), x(0, a - 7), M(), $(), z(d, g), m >= 7 && R(d), r == null && (r = U(m, s, o)), O(r, g);
            }, x = function(d, g) {
              for (var c = -1; c <= 7; c += 1) if (!(d + c <= -1 || a <= d + c)) for (var f = -1; f <= 7; f += 1) g + f <= -1 || a <= g + f || (i[d + c][g + f] = 0 <= c && c <= 6 && (f == 0 || f == 6) || 0 <= f && f <= 6 && (c == 0 || c == 6) || 2 <= c && c <= 4 && 2 <= f && f <= 4);
            }, $ = function() {
              for (var d = 8; d < a - 8; d += 1) i[d][6] == null && (i[d][6] = d % 2 == 0);
              for (var g = 8; g < a - 8; g += 1) i[6][g] == null && (i[6][g] = g % 2 == 0);
            }, M = function() {
              for (var d = G.getPatternPosition(m), g = 0; g < d.length; g += 1) for (var c = 0; c < d.length; c += 1) {
                var f = d[g], w = d[c];
                if (i[f][w] == null) for (var P = -2; P <= 2; P += 1) for (var T = -2; T <= 2; T += 1) i[f + P][w + T] = P == -2 || P == 2 || T == -2 || T == 2 || P == 0 && T == 0;
              }
            }, R = function(d) {
              for (var g = G.getBCHTypeNumber(m), c = 0; c < 18; c += 1) {
                var f = !d && (g >> c & 1) == 1;
                i[Math.floor(c / 3)][c % 3 + a - 8 - 3] = f;
              }
              for (c = 0; c < 18; c += 1) f = !d && (g >> c & 1) == 1, i[c % 3 + a - 8 - 3][Math.floor(c / 3)] = f;
            }, z = function(d, g) {
              for (var c = s << 3 | g, f = G.getBCHTypeInfo(c), w = 0; w < 15; w += 1) {
                var P = !d && (f >> w & 1) == 1;
                w < 6 ? i[w][8] = P : w < 8 ? i[w + 1][8] = P : i[a - 15 + w][8] = P;
              }
              for (w = 0; w < 15; w += 1) P = !d && (f >> w & 1) == 1, w < 8 ? i[8][a - w - 1] = P : w < 9 ? i[8][15 - w - 1 + 1] = P : i[8][15 - w - 1] = P;
              i[a - 8][8] = !d;
            }, O = function(d, g) {
              for (var c = -1, f = a - 1, w = 7, P = 0, T = G.getMaskFunction(g), j = a - 1; j > 0; j -= 2) for (j == 6 && (j -= 1); ; ) {
                for (var K = 0; K < 2; K += 1) if (i[f][j - K] == null) {
                  var Z = !1;
                  P < d.length && (Z = (d[P] >>> w & 1) == 1), T(f, j - K) && (Z = !Z), i[f][j - K] = Z, (w -= 1) == -1 && (P += 1, w = 7);
                }
                if ((f += c) < 0 || a <= f) {
                  f -= c, c = -c;
                  break;
                }
              }
            }, U = function(d, g, c) {
              for (var f = he.getRSBlocks(d, g), w = ue(), P = 0; P < c.length; P += 1) {
                var T = c[P];
                w.put(T.getMode(), 4), w.put(T.getLength(), G.getLengthInBits(T.getMode(), d)), T.write(w);
              }
              var j = 0;
              for (P = 0; P < f.length; P += 1) j += f[P].dataCount;
              if (w.getLengthInBits() > 8 * j) throw "code length overflow. (" + w.getLengthInBits() + ">" + 8 * j + ")";
              for (w.getLengthInBits() + 4 <= 8 * j && w.put(0, 4); w.getLengthInBits() % 8 != 0; ) w.putBit(!1);
              for (; !(w.getLengthInBits() >= 8 * j || (w.put(236, 8), w.getLengthInBits() >= 8 * j)); ) w.put(17, 8);
              return function(K, Z) {
                for (var J = 0, ae = 0, se = 0, ee = new Array(Z.length), W = new Array(Z.length), q = 0; q < Z.length; q += 1) {
                  var ie = Z[q].dataCount, oe = Z[q].totalCount - ie;
                  ae = Math.max(ae, ie), se = Math.max(se, oe), ee[q] = new Array(ie);
                  for (var H = 0; H < ee[q].length; H += 1) ee[q][H] = 255 & K.getBuffer()[H + J];
                  J += ie;
                  var de = G.getErrorCorrectPolynomial(oe), le = ne(ee[q], de.getLength() - 1).mod(de);
                  for (W[q] = new Array(de.getLength() - 1), H = 0; H < W[q].length; H += 1) {
                    var re = H + le.getLength() - W[q].length;
                    W[q][H] = re >= 0 ? le.getAt(re) : 0;
                  }
                }
                var Ee = 0;
                for (H = 0; H < Z.length; H += 1) Ee += Z[H].totalCount;
                var ye = new Array(Ee), ce = 0;
                for (H = 0; H < ae; H += 1) for (q = 0; q < Z.length; q += 1) H < ee[q].length && (ye[ce] = ee[q][H], ce += 1);
                for (H = 0; H < se; H += 1) for (q = 0; q < Z.length; q += 1) H < W[q].length && (ye[ce] = W[q][H], ce += 1);
                return ye;
              }(w, f);
            };
            u.addData = function(d, g) {
              var c = null;
              switch (g = g || "Byte") {
                case "Numeric":
                  c = Se(d);
                  break;
                case "Alphanumeric":
                  c = xe(d);
                  break;
                case "Byte":
                  c = pe(d);
                  break;
                case "Kanji":
                  c = _e(d);
                  break;
                default:
                  throw "mode:" + g;
              }
              o.push(c), r = null;
            }, u.isDark = function(d, g) {
              if (d < 0 || a <= d || g < 0 || a <= g) throw d + "," + g;
              return i[d][g];
            }, u.getModuleCount = function() {
              return a;
            }, u.make = function() {
              if (m < 1) {
                for (var d = 1; d < 40; d++) {
                  for (var g = he.getRSBlocks(d, s), c = ue(), f = 0; f < o.length; f++) {
                    var w = o[f];
                    c.put(w.getMode(), 4), c.put(w.getLength(), G.getLengthInBits(w.getMode(), d)), w.write(c);
                  }
                  var P = 0;
                  for (f = 0; f < g.length; f++) P += g[f].dataCount;
                  if (c.getLengthInBits() <= 8 * P) break;
                }
                m = d;
              }
              C(!1, function() {
                for (var T = 0, j = 0, K = 0; K < 8; K += 1) {
                  C(!0, K);
                  var Z = G.getLostPoint(u);
                  (K == 0 || T > Z) && (T = Z, j = K);
                }
                return j;
              }());
            }, u.createTableTag = function(d, g) {
              d = d || 2;
              var c = "";
              c += '<table style="', c += " border-width: 0px; border-style: none;", c += " border-collapse: collapse;", c += " padding: 0px; margin: " + (g = g === void 0 ? 4 * d : g) + "px;", c += '">', c += "<tbody>";
              for (var f = 0; f < u.getModuleCount(); f += 1) {
                c += "<tr>";
                for (var w = 0; w < u.getModuleCount(); w += 1) c += '<td style="', c += " border-width: 0px; border-style: none;", c += " border-collapse: collapse;", c += " padding: 0px; margin: 0px;", c += " width: " + d + "px;", c += " height: " + d + "px;", c += " background-color: ", c += u.isDark(f, w) ? "#000000" : "#ffffff", c += ";", c += '"/>';
                c += "</tr>";
              }
              return (c += "</tbody>") + "</table>";
            }, u.createSvgTag = function(d, g, c, f) {
              var w = {};
              typeof arguments[0] == "object" && (d = (w = arguments[0]).cellSize, g = w.margin, c = w.alt, f = w.title), d = d || 2, g = g === void 0 ? 4 * d : g, (c = typeof c == "string" ? { text: c } : c || {}).text = c.text || null, c.id = c.text ? c.id || "qrcode-description" : null, (f = typeof f == "string" ? { text: f } : f || {}).text = f.text || null, f.id = f.text ? f.id || "qrcode-title" : null;
              var P, T, j, K, Z = u.getModuleCount() * d + 2 * g, J = "";
              for (K = "l" + d + ",0 0," + d + " -" + d + ",0 0,-" + d + "z ", J += '<svg version="1.1" xmlns="http://www.w3.org/2000/svg"', J += w.scalable ? "" : ' width="' + Z + 'px" height="' + Z + 'px"', J += ' viewBox="0 0 ' + Z + " " + Z + '" ', J += ' preserveAspectRatio="xMinYMin meet"', J += f.text || c.text ? ' role="img" aria-labelledby="' + N([f.id, c.id].join(" ").trim()) + '"' : "", J += ">", J += f.text ? '<title id="' + N(f.id) + '">' + N(f.text) + "</title>" : "", J += c.text ? '<description id="' + N(c.id) + '">' + N(c.text) + "</description>" : "", J += '<rect width="100%" height="100%" fill="white" cx="0" cy="0"/>', J += '<path d="', T = 0; T < u.getModuleCount(); T += 1) for (j = T * d + g, P = 0; P < u.getModuleCount(); P += 1) u.isDark(T, P) && (J += "M" + (P * d + g) + "," + j + K);
              return (J += '" stroke="transparent" fill="black"/>') + "</svg>";
            }, u.createDataURL = function(d, g) {
              d = d || 2, g = g === void 0 ? 4 * d : g;
              var c = u.getModuleCount() * d + 2 * g, f = g, w = c - g;
              return me(c, c, function(P, T) {
                if (f <= P && P < w && f <= T && T < w) {
                  var j = Math.floor((P - f) / d), K = Math.floor((T - f) / d);
                  return u.isDark(K, j) ? 0 : 1;
                }
                return 1;
              });
            }, u.createImgTag = function(d, g, c) {
              d = d || 2, g = g === void 0 ? 4 * d : g;
              var f = u.getModuleCount() * d + 2 * g, w = "";
              return w += "<img", w += ' src="', w += u.createDataURL(d, g), w += '"', w += ' width="', w += f, w += '"', w += ' height="', w += f, w += '"', c && (w += ' alt="', w += N(c), w += '"'), w + "/>";
            };
            var N = function(d) {
              for (var g = "", c = 0; c < d.length; c += 1) {
                var f = d.charAt(c);
                switch (f) {
                  case "<":
                    g += "&lt;";
                    break;
                  case ">":
                    g += "&gt;";
                    break;
                  case "&":
                    g += "&amp;";
                    break;
                  case '"':
                    g += "&quot;";
                    break;
                  default:
                    g += f;
                }
              }
              return g;
            };
            return u.createASCII = function(d, g) {
              if ((d = d || 1) < 2) return function(ee) {
                ee = ee === void 0 ? 2 : ee;
                var W, q, ie, oe, H, de = 1 * u.getModuleCount() + 2 * ee, le = ee, re = de - ee, Ee = { "██": "█", "█ ": "▀", " █": "▄", "  ": " " }, ye = { "██": "▀", "█ ": "▀", " █": " ", "  ": " " }, ce = "";
                for (W = 0; W < de; W += 2) {
                  for (ie = Math.floor((W - le) / 1), oe = Math.floor((W + 1 - le) / 1), q = 0; q < de; q += 1) H = "█", le <= q && q < re && le <= W && W < re && u.isDark(ie, Math.floor((q - le) / 1)) && (H = " "), le <= q && q < re && le <= W + 1 && W + 1 < re && u.isDark(oe, Math.floor((q - le) / 1)) ? H += " " : H += "█", ce += ee < 1 && W + 1 >= re ? ye[H] : Ee[H];
                  ce += `
`;
                }
                return de % 2 && ee > 0 ? ce.substring(0, ce.length - de - 1) + Array(de + 1).join("▀") : ce.substring(0, ce.length - 1);
              }(g);
              d -= 1, g = g === void 0 ? 2 * d : g;
              var c, f, w, P, T = u.getModuleCount() * d + 2 * g, j = g, K = T - g, Z = Array(d + 1).join("██"), J = Array(d + 1).join("  "), ae = "", se = "";
              for (c = 0; c < T; c += 1) {
                for (w = Math.floor((c - j) / d), se = "", f = 0; f < T; f += 1) P = 1, j <= f && f < K && j <= c && c < K && u.isDark(w, Math.floor((f - j) / d)) && (P = 0), se += P ? Z : J;
                for (w = 0; w < d; w += 1) ae += se + `
`;
              }
              return ae.substring(0, ae.length - 1);
            }, u.renderTo2dContext = function(d, g) {
              g = g || 2;
              for (var c = u.getModuleCount(), f = 0; f < c; f++) for (var w = 0; w < c; w++) d.fillStyle = u.isDark(f, w) ? "black" : "white", d.fillRect(f * g, w * g, g, g);
            }, u;
          };
          D.stringToBytes = (D.stringToBytesFuncs = { default: function(v) {
            for (var y = [], m = 0; m < v.length; m += 1) {
              var s = v.charCodeAt(m);
              y.push(255 & s);
            }
            return y;
          } }).default, D.createStringToBytes = function(v, y) {
            var m = function() {
              for (var i = ke(v), a = function() {
                var $ = i.read();
                if ($ == -1) throw "eof";
                return $;
              }, r = 0, o = {}; ; ) {
                var u = i.read();
                if (u == -1) break;
                var C = a(), x = a() << 8 | a();
                o[String.fromCharCode(u << 8 | C)] = x, r += 1;
              }
              if (r != y) throw r + " != " + y;
              return o;
            }(), s = 63;
            return function(i) {
              for (var a = [], r = 0; r < i.length; r += 1) {
                var o = i.charCodeAt(r);
                if (o < 128) a.push(o);
                else {
                  var u = m[i.charAt(r)];
                  typeof u == "number" ? (255 & u) == u ? a.push(u) : (a.push(u >>> 8), a.push(255 & u)) : a.push(s);
                }
              }
              return a;
            };
          };
          var X, I, B, k, F, Y = { L: 1, M: 0, Q: 3, H: 2 }, G = (X = [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]], I = 1335, B = 7973, F = function(v) {
            for (var y = 0; v != 0; ) y += 1, v >>>= 1;
            return y;
          }, (k = {}).getBCHTypeInfo = function(v) {
            for (var y = v << 10; F(y) - F(I) >= 0; ) y ^= I << F(y) - F(I);
            return 21522 ^ (v << 10 | y);
          }, k.getBCHTypeNumber = function(v) {
            for (var y = v << 12; F(y) - F(B) >= 0; ) y ^= B << F(y) - F(B);
            return v << 12 | y;
          }, k.getPatternPosition = function(v) {
            return X[v - 1];
          }, k.getMaskFunction = function(v) {
            switch (v) {
              case 0:
                return function(y, m) {
                  return (y + m) % 2 == 0;
                };
              case 1:
                return function(y, m) {
                  return y % 2 == 0;
                };
              case 2:
                return function(y, m) {
                  return m % 3 == 0;
                };
              case 3:
                return function(y, m) {
                  return (y + m) % 3 == 0;
                };
              case 4:
                return function(y, m) {
                  return (Math.floor(y / 2) + Math.floor(m / 3)) % 2 == 0;
                };
              case 5:
                return function(y, m) {
                  return y * m % 2 + y * m % 3 == 0;
                };
              case 6:
                return function(y, m) {
                  return (y * m % 2 + y * m % 3) % 2 == 0;
                };
              case 7:
                return function(y, m) {
                  return (y * m % 3 + (y + m) % 2) % 2 == 0;
                };
              default:
                throw "bad maskPattern:" + v;
            }
          }, k.getErrorCorrectPolynomial = function(v) {
            for (var y = ne([1], 0), m = 0; m < v; m += 1) y = y.multiply(ne([1, Q.gexp(m)], 0));
            return y;
          }, k.getLengthInBits = function(v, y) {
            if (1 <= y && y < 10) switch (v) {
              case 1:
                return 10;
              case 2:
                return 9;
              case 4:
              case 8:
                return 8;
              default:
                throw "mode:" + v;
            }
            else if (y < 27) switch (v) {
              case 1:
                return 12;
              case 2:
                return 11;
              case 4:
                return 16;
              case 8:
                return 10;
              default:
                throw "mode:" + v;
            }
            else {
              if (!(y < 41)) throw "type:" + y;
              switch (v) {
                case 1:
                  return 14;
                case 2:
                  return 13;
                case 4:
                  return 16;
                case 8:
                  return 12;
                default:
                  throw "mode:" + v;
              }
            }
          }, k.getLostPoint = function(v) {
            for (var y = v.getModuleCount(), m = 0, s = 0; s < y; s += 1) for (var i = 0; i < y; i += 1) {
              for (var a = 0, r = v.isDark(s, i), o = -1; o <= 1; o += 1) if (!(s + o < 0 || y <= s + o)) for (var u = -1; u <= 1; u += 1) i + u < 0 || y <= i + u || o == 0 && u == 0 || r == v.isDark(s + o, i + u) && (a += 1);
              a > 5 && (m += 3 + a - 5);
            }
            for (s = 0; s < y - 1; s += 1) for (i = 0; i < y - 1; i += 1) {
              var C = 0;
              v.isDark(s, i) && (C += 1), v.isDark(s + 1, i) && (C += 1), v.isDark(s, i + 1) && (C += 1), v.isDark(s + 1, i + 1) && (C += 1), C != 0 && C != 4 || (m += 3);
            }
            for (s = 0; s < y; s += 1) for (i = 0; i < y - 6; i += 1) v.isDark(s, i) && !v.isDark(s, i + 1) && v.isDark(s, i + 2) && v.isDark(s, i + 3) && v.isDark(s, i + 4) && !v.isDark(s, i + 5) && v.isDark(s, i + 6) && (m += 40);
            for (i = 0; i < y; i += 1) for (s = 0; s < y - 6; s += 1) v.isDark(s, i) && !v.isDark(s + 1, i) && v.isDark(s + 2, i) && v.isDark(s + 3, i) && v.isDark(s + 4, i) && !v.isDark(s + 5, i) && v.isDark(s + 6, i) && (m += 40);
            var x = 0;
            for (i = 0; i < y; i += 1) for (s = 0; s < y; s += 1) v.isDark(s, i) && (x += 1);
            return m + Math.abs(100 * x / y / y - 50) / 5 * 10;
          }, k), Q = function() {
            for (var v = new Array(256), y = new Array(256), m = 0; m < 8; m += 1) v[m] = 1 << m;
            for (m = 8; m < 256; m += 1) v[m] = v[m - 4] ^ v[m - 5] ^ v[m - 6] ^ v[m - 8];
            for (m = 0; m < 255; m += 1) y[v[m]] = m;
            return { glog: function(s) {
              if (s < 1) throw "glog(" + s + ")";
              return y[s];
            }, gexp: function(s) {
              for (; s < 0; ) s += 255;
              for (; s >= 256; ) s -= 255;
              return v[s];
            } };
          }();
          function ne(v, y) {
            if (v.length === void 0) throw v.length + "/" + y;
            var m = function() {
              for (var i = 0; i < v.length && v[i] == 0; ) i += 1;
              for (var a = new Array(v.length - i + y), r = 0; r < v.length - i; r += 1) a[r] = v[r + i];
              return a;
            }(), s = { getAt: function(i) {
              return m[i];
            }, getLength: function() {
              return m.length;
            }, multiply: function(i) {
              for (var a = new Array(s.getLength() + i.getLength() - 1), r = 0; r < s.getLength(); r += 1) for (var o = 0; o < i.getLength(); o += 1) a[r + o] ^= Q.gexp(Q.glog(s.getAt(r)) + Q.glog(i.getAt(o)));
              return ne(a, 0);
            }, mod: function(i) {
              if (s.getLength() - i.getLength() < 0) return s;
              for (var a = Q.glog(s.getAt(0)) - Q.glog(i.getAt(0)), r = new Array(s.getLength()), o = 0; o < s.getLength(); o += 1) r[o] = s.getAt(o);
              for (o = 0; o < i.getLength(); o += 1) r[o] ^= Q.gexp(Q.glog(i.getAt(o)) + a);
              return ne(r, 0).mod(i);
            } };
            return s;
          }
          var he = /* @__PURE__ */ function() {
            var v = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12, 7, 37, 13], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]], y = function(s, i) {
              var a = {};
              return a.totalCount = s, a.dataCount = i, a;
            }, m = { getRSBlocks: function(s, i) {
              var a = function(R, z) {
                switch (z) {
                  case Y.L:
                    return v[4 * (R - 1) + 0];
                  case Y.M:
                    return v[4 * (R - 1) + 1];
                  case Y.Q:
                    return v[4 * (R - 1) + 2];
                  case Y.H:
                    return v[4 * (R - 1) + 3];
                  default:
                    return;
                }
              }(s, i);
              if (a === void 0) throw "bad rs block @ typeNumber:" + s + "/errorCorrectionLevel:" + i;
              for (var r = a.length / 3, o = [], u = 0; u < r; u += 1) for (var C = a[3 * u + 0], x = a[3 * u + 1], $ = a[3 * u + 2], M = 0; M < C; M += 1) o.push(y(x, $));
              return o;
            } };
            return m;
          }(), ue = function() {
            var v = [], y = 0, m = { getBuffer: function() {
              return v;
            }, getAt: function(s) {
              var i = Math.floor(s / 8);
              return (v[i] >>> 7 - s % 8 & 1) == 1;
            }, put: function(s, i) {
              for (var a = 0; a < i; a += 1) m.putBit((s >>> i - a - 1 & 1) == 1);
            }, getLengthInBits: function() {
              return y;
            }, putBit: function(s) {
              var i = Math.floor(y / 8);
              v.length <= i && v.push(0), s && (v[i] |= 128 >>> y % 8), y += 1;
            } };
            return m;
          }, Se = function(v) {
            var y = v, m = { getMode: function() {
              return 1;
            }, getLength: function(a) {
              return y.length;
            }, write: function(a) {
              for (var r = y, o = 0; o + 2 < r.length; ) a.put(s(r.substring(o, o + 3)), 10), o += 3;
              o < r.length && (r.length - o == 1 ? a.put(s(r.substring(o, o + 1)), 4) : r.length - o == 2 && a.put(s(r.substring(o, o + 2)), 7));
            } }, s = function(a) {
              for (var r = 0, o = 0; o < a.length; o += 1) r = 10 * r + i(a.charAt(o));
              return r;
            }, i = function(a) {
              if ("0" <= a && a <= "9") return a.charCodeAt(0) - 48;
              throw "illegal char :" + a;
            };
            return m;
          }, xe = function(v) {
            var y = v, m = { getMode: function() {
              return 2;
            }, getLength: function(i) {
              return y.length;
            }, write: function(i) {
              for (var a = y, r = 0; r + 1 < a.length; ) i.put(45 * s(a.charAt(r)) + s(a.charAt(r + 1)), 11), r += 2;
              r < a.length && i.put(s(a.charAt(r)), 6);
            } }, s = function(i) {
              if ("0" <= i && i <= "9") return i.charCodeAt(0) - 48;
              if ("A" <= i && i <= "Z") return i.charCodeAt(0) - 65 + 10;
              switch (i) {
                case " ":
                  return 36;
                case "$":
                  return 37;
                case "%":
                  return 38;
                case "*":
                  return 39;
                case "+":
                  return 40;
                case "-":
                  return 41;
                case ".":
                  return 42;
                case "/":
                  return 43;
                case ":":
                  return 44;
                default:
                  throw "illegal char :" + i;
              }
            };
            return m;
          }, pe = function(v) {
            var y = D.stringToBytes(v);
            return { getMode: function() {
              return 4;
            }, getLength: function(m) {
              return y.length;
            }, write: function(m) {
              for (var s = 0; s < y.length; s += 1) m.put(y[s], 8);
            } };
          }, _e = function(v) {
            var y = D.stringToBytesFuncs.SJIS;
            if (!y) throw "sjis not supported.";
            (function() {
              var i = y("友");
              if (i.length != 2 || (i[0] << 8 | i[1]) != 38726) throw "sjis not supported.";
            })();
            var m = y(v), s = { getMode: function() {
              return 8;
            }, getLength: function(i) {
              return ~~(m.length / 2);
            }, write: function(i) {
              for (var a = m, r = 0; r + 1 < a.length; ) {
                var o = (255 & a[r]) << 8 | 255 & a[r + 1];
                if (33088 <= o && o <= 40956) o -= 33088;
                else {
                  if (!(57408 <= o && o <= 60351)) throw "illegal char at " + (r + 1) + "/" + o;
                  o -= 49472;
                }
                o = 192 * (o >>> 8 & 255) + (255 & o), i.put(o, 13), r += 2;
              }
              if (r < a.length) throw "illegal char at " + (r + 1);
            } };
            return s;
          }, Ce = function() {
            var v = [], y = { writeByte: function(m) {
              v.push(255 & m);
            }, writeShort: function(m) {
              y.writeByte(m), y.writeByte(m >>> 8);
            }, writeBytes: function(m, s, i) {
              s = s || 0, i = i || m.length;
              for (var a = 0; a < i; a += 1) y.writeByte(m[a + s]);
            }, writeString: function(m) {
              for (var s = 0; s < m.length; s += 1) y.writeByte(m.charCodeAt(s));
            }, toByteArray: function() {
              return v;
            }, toString: function() {
              var m = "";
              m += "[";
              for (var s = 0; s < v.length; s += 1) s > 0 && (m += ","), m += v[s];
              return m + "]";
            } };
            return y;
          }, ke = function(v) {
            var y = v, m = 0, s = 0, i = 0, a = { read: function() {
              for (; i < 8; ) {
                if (m >= y.length) {
                  if (i == 0) return -1;
                  throw "unexpected end of file./" + i;
                }
                var o = y.charAt(m);
                if (m += 1, o == "=") return i = 0, -1;
                o.match(/^\s$/) || (s = s << 6 | r(o.charCodeAt(0)), i += 6);
              }
              var u = s >>> i - 8 & 255;
              return i -= 8, u;
            } }, r = function(o) {
              if (65 <= o && o <= 90) return o - 65;
              if (97 <= o && o <= 122) return o - 97 + 26;
              if (48 <= o && o <= 57) return o - 48 + 52;
              if (o == 43) return 62;
              if (o == 47) return 63;
              throw "c:" + o;
            };
            return a;
          }, me = function(v, y, m) {
            for (var s = function(x, $) {
              var M = x, R = $, z = new Array(x * $), O = { setPixel: function(d, g, c) {
                z[g * M + d] = c;
              }, write: function(d) {
                d.writeString("GIF87a"), d.writeShort(M), d.writeShort(R), d.writeByte(128), d.writeByte(0), d.writeByte(0), d.writeByte(0), d.writeByte(0), d.writeByte(0), d.writeByte(255), d.writeByte(255), d.writeByte(255), d.writeString(","), d.writeShort(0), d.writeShort(0), d.writeShort(M), d.writeShort(R), d.writeByte(0);
                var g = U(2);
                d.writeByte(2);
                for (var c = 0; g.length - c > 255; ) d.writeByte(255), d.writeBytes(g, c, 255), c += 255;
                d.writeByte(g.length - c), d.writeBytes(g, c, g.length - c), d.writeByte(0), d.writeString(";");
              } }, U = function(d) {
                for (var g = 1 << d, c = 1 + (1 << d), f = d + 1, w = N(), P = 0; P < g; P += 1) w.add(String.fromCharCode(P));
                w.add(String.fromCharCode(g)), w.add(String.fromCharCode(c));
                var T, j, K, Z = Ce(), J = (T = Z, j = 0, K = 0, { write: function(W, q) {
                  if (W >>> q) throw "length over";
                  for (; j + q >= 8; ) T.writeByte(255 & (W << j | K)), q -= 8 - j, W >>>= 8 - j, K = 0, j = 0;
                  K |= W << j, j += q;
                }, flush: function() {
                  j > 0 && T.writeByte(K);
                } });
                J.write(g, f);
                var ae = 0, se = String.fromCharCode(z[ae]);
                for (ae += 1; ae < z.length; ) {
                  var ee = String.fromCharCode(z[ae]);
                  ae += 1, w.contains(se + ee) ? se += ee : (J.write(w.indexOf(se), f), w.size() < 4095 && (w.size() == 1 << f && (f += 1), w.add(se + ee)), se = ee);
                }
                return J.write(w.indexOf(se), f), J.write(c, f), J.flush(), Z.toByteArray();
              }, N = function() {
                var d = {}, g = 0, c = { add: function(f) {
                  if (c.contains(f)) throw "dup key:" + f;
                  d[f] = g, g += 1;
                }, size: function() {
                  return g;
                }, indexOf: function(f) {
                  return d[f];
                }, contains: function(f) {
                  return d[f] !== void 0;
                } };
                return c;
              };
              return O;
            }(v, y), i = 0; i < y; i += 1) for (var a = 0; a < v; a += 1) s.setPixel(a, i, m(a, i));
            var r = Ce();
            s.write(r);
            for (var o = function() {
              var x = 0, $ = 0, M = 0, R = "", z = {}, O = function(N) {
                R += String.fromCharCode(U(63 & N));
              }, U = function(N) {
                if (!(N < 0)) {
                  if (N < 26) return 65 + N;
                  if (N < 52) return N - 26 + 97;
                  if (N < 62) return N - 52 + 48;
                  if (N == 62) return 43;
                  if (N == 63) return 47;
                }
                throw "n:" + N;
              };
              return z.writeByte = function(N) {
                for (x = x << 8 | 255 & N, $ += 8, M += 1; $ >= 6; ) O(x >>> $ - 6), $ -= 6;
              }, z.flush = function() {
                if ($ > 0 && (O(x << 6 - $), x = 0, $ = 0), M % 3 != 0) for (var N = 3 - M % 3, d = 0; d < N; d += 1) R += "=";
              }, z.toString = function() {
                return R;
              }, z;
            }(), u = r.toByteArray(), C = 0; C < u.length; C += 1) o.writeByte(u[C]);
            return o.flush(), "data:image/gif;base64," + o;
          };
          return D;
        }();
        L.stringToBytesFuncs["UTF-8"] = function(D) {
          return function(X) {
            for (var I = [], B = 0; B < X.length; B++) {
              var k = X.charCodeAt(B);
              k < 128 ? I.push(k) : k < 2048 ? I.push(192 | k >> 6, 128 | 63 & k) : k < 55296 || k >= 57344 ? I.push(224 | k >> 12, 128 | k >> 6 & 63, 128 | 63 & k) : (B++, k = 65536 + ((1023 & k) << 10 | 1023 & X.charCodeAt(B)), I.push(240 | k >> 18, 128 | k >> 12 & 63, 128 | k >> 6 & 63, 128 | 63 & k));
            }
            return I;
          }(D);
        }, (A = typeof (E = function() {
          return L;
        }) == "function" ? E.apply(_, []) : E) === void 0 || (b.exports = A);
      } }, n = {};
      function l(b) {
        var _ = n[b];
        if (_ !== void 0) return _.exports;
        var E = n[b] = { exports: {} };
        return t[b](E, E.exports, l), E.exports;
      }
      l.n = (b) => {
        var _ = b && b.__esModule ? () => b.default : () => b;
        return l.d(_, { a: _ }), _;
      }, l.d = (b, _) => {
        for (var E in _) l.o(_, E) && !l.o(b, E) && Object.defineProperty(b, E, { enumerable: !0, get: _[E] });
      }, l.o = (b, _) => Object.prototype.hasOwnProperty.call(b, _);
      var h = {};
      return (() => {
        l.d(h, { default: () => y });
        const b = (m) => !!m && typeof m == "object" && !Array.isArray(m);
        function _(m, ...s) {
          if (!s.length) return m;
          const i = s.shift();
          return i !== void 0 && b(m) && b(i) ? (m = Object.assign({}, m), Object.keys(i).forEach((a) => {
            const r = m[a], o = i[a];
            Array.isArray(r) && Array.isArray(o) ? m[a] = o : b(r) && b(o) ? m[a] = _(Object.assign({}, r), o) : m[a] = o;
          }), _(m, ...s)) : m;
        }
        function E(m, s) {
          const i = document.createElement("a");
          i.download = s, i.href = m, document.body.appendChild(i), i.click(), document.body.removeChild(i);
        }
        const A = { L: 0.07, M: 0.15, Q: 0.25, H: 0.3 };
        class L {
          constructor({ svg: s, type: i, window: a }) {
            this._svg = s, this._type = i, this._window = a;
          }
          draw(s, i, a, r) {
            let o;
            switch (this._type) {
              case "dots":
                o = this._drawDot;
                break;
              case "classy":
                o = this._drawClassy;
                break;
              case "classy-rounded":
                o = this._drawClassyRounded;
                break;
              case "rounded":
                o = this._drawRounded;
                break;
              case "extra-rounded":
                o = this._drawExtraRounded;
                break;
              default:
                o = this._drawSquare;
            }
            o.call(this, { x: s, y: i, size: a, getNeighbor: r });
          }
          _rotateFigure({ x: s, y: i, size: a, rotation: r = 0, draw: o }) {
            var u;
            const C = s + a / 2, x = i + a / 2;
            o(), (u = this._element) === null || u === void 0 || u.setAttribute("transform", `rotate(${180 * r / Math.PI},${C},${x})`);
          }
          _basicDot(s) {
            const { size: i, x: a, y: r } = s;
            this._rotateFigure(Object.assign(Object.assign({}, s), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "circle"), this._element.setAttribute("cx", String(a + i / 2)), this._element.setAttribute("cy", String(r + i / 2)), this._element.setAttribute("r", String(i / 2));
            } }));
          }
          _basicSquare(s) {
            const { size: i, x: a, y: r } = s;
            this._rotateFigure(Object.assign(Object.assign({}, s), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "rect"), this._element.setAttribute("x", String(a)), this._element.setAttribute("y", String(r)), this._element.setAttribute("width", String(i)), this._element.setAttribute("height", String(i));
            } }));
          }
          _basicSideRounded(s) {
            const { size: i, x: a, y: r } = s;
            this._rotateFigure(Object.assign(Object.assign({}, s), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("d", `M ${a} ${r}v ${i}h ` + i / 2 + `a ${i / 2} ${i / 2}, 0, 0, 0, 0 ${-i}`);
            } }));
          }
          _basicCornerRounded(s) {
            const { size: i, x: a, y: r } = s;
            this._rotateFigure(Object.assign(Object.assign({}, s), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("d", `M ${a} ${r}v ${i}h ${i}v ` + -i / 2 + `a ${i / 2} ${i / 2}, 0, 0, 0, ${-i / 2} ${-i / 2}`);
            } }));
          }
          _basicCornerExtraRounded(s) {
            const { size: i, x: a, y: r } = s;
            this._rotateFigure(Object.assign(Object.assign({}, s), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("d", `M ${a} ${r}v ${i}h ${i}a ${i} ${i}, 0, 0, 0, ${-i} ${-i}`);
            } }));
          }
          _basicCornersRounded(s) {
            const { size: i, x: a, y: r } = s;
            this._rotateFigure(Object.assign(Object.assign({}, s), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("d", `M ${a} ${r}v ` + i / 2 + `a ${i / 2} ${i / 2}, 0, 0, 0, ${i / 2} ${i / 2}h ` + i / 2 + "v " + -i / 2 + `a ${i / 2} ${i / 2}, 0, 0, 0, ${-i / 2} ${-i / 2}`);
            } }));
          }
          _drawDot({ x: s, y: i, size: a }) {
            this._basicDot({ x: s, y: i, size: a, rotation: 0 });
          }
          _drawSquare({ x: s, y: i, size: a }) {
            this._basicSquare({ x: s, y: i, size: a, rotation: 0 });
          }
          _drawRounded({ x: s, y: i, size: a, getNeighbor: r }) {
            const o = r ? +r(-1, 0) : 0, u = r ? +r(1, 0) : 0, C = r ? +r(0, -1) : 0, x = r ? +r(0, 1) : 0, $ = o + u + C + x;
            if ($ !== 0) if ($ > 2 || o && u || C && x) this._basicSquare({ x: s, y: i, size: a, rotation: 0 });
            else {
              if ($ === 2) {
                let M = 0;
                return o && C ? M = Math.PI / 2 : C && u ? M = Math.PI : u && x && (M = -Math.PI / 2), void this._basicCornerRounded({ x: s, y: i, size: a, rotation: M });
              }
              if ($ === 1) {
                let M = 0;
                return C ? M = Math.PI / 2 : u ? M = Math.PI : x && (M = -Math.PI / 2), void this._basicSideRounded({ x: s, y: i, size: a, rotation: M });
              }
            }
            else this._basicDot({ x: s, y: i, size: a, rotation: 0 });
          }
          _drawExtraRounded({ x: s, y: i, size: a, getNeighbor: r }) {
            const o = r ? +r(-1, 0) : 0, u = r ? +r(1, 0) : 0, C = r ? +r(0, -1) : 0, x = r ? +r(0, 1) : 0, $ = o + u + C + x;
            if ($ !== 0) if ($ > 2 || o && u || C && x) this._basicSquare({ x: s, y: i, size: a, rotation: 0 });
            else {
              if ($ === 2) {
                let M = 0;
                return o && C ? M = Math.PI / 2 : C && u ? M = Math.PI : u && x && (M = -Math.PI / 2), void this._basicCornerExtraRounded({ x: s, y: i, size: a, rotation: M });
              }
              if ($ === 1) {
                let M = 0;
                return C ? M = Math.PI / 2 : u ? M = Math.PI : x && (M = -Math.PI / 2), void this._basicSideRounded({ x: s, y: i, size: a, rotation: M });
              }
            }
            else this._basicDot({ x: s, y: i, size: a, rotation: 0 });
          }
          _drawClassy({ x: s, y: i, size: a, getNeighbor: r }) {
            const o = r ? +r(-1, 0) : 0, u = r ? +r(1, 0) : 0, C = r ? +r(0, -1) : 0, x = r ? +r(0, 1) : 0;
            o + u + C + x !== 0 ? o || C ? u || x ? this._basicSquare({ x: s, y: i, size: a, rotation: 0 }) : this._basicCornerRounded({ x: s, y: i, size: a, rotation: Math.PI / 2 }) : this._basicCornerRounded({ x: s, y: i, size: a, rotation: -Math.PI / 2 }) : this._basicCornersRounded({ x: s, y: i, size: a, rotation: Math.PI / 2 });
          }
          _drawClassyRounded({ x: s, y: i, size: a, getNeighbor: r }) {
            const o = r ? +r(-1, 0) : 0, u = r ? +r(1, 0) : 0, C = r ? +r(0, -1) : 0, x = r ? +r(0, 1) : 0;
            o + u + C + x !== 0 ? o || C ? u || x ? this._basicSquare({ x: s, y: i, size: a, rotation: 0 }) : this._basicCornerExtraRounded({ x: s, y: i, size: a, rotation: Math.PI / 2 }) : this._basicCornerExtraRounded({ x: s, y: i, size: a, rotation: -Math.PI / 2 }) : this._basicCornersRounded({ x: s, y: i, size: a, rotation: Math.PI / 2 });
          }
        }
        const D = { dot: "dot", square: "square", extraRounded: "extra-rounded" }, X = Object.values(D);
        class I {
          constructor({ svg: s, type: i, window: a }) {
            this._svg = s, this._type = i, this._window = a;
          }
          draw(s, i, a, r) {
            let o;
            switch (this._type) {
              case D.square:
                o = this._drawSquare;
                break;
              case D.extraRounded:
                o = this._drawExtraRounded;
                break;
              default:
                o = this._drawDot;
            }
            o.call(this, { x: s, y: i, size: a, rotation: r });
          }
          _rotateFigure({ x: s, y: i, size: a, rotation: r = 0, draw: o }) {
            var u;
            const C = s + a / 2, x = i + a / 2;
            o(), (u = this._element) === null || u === void 0 || u.setAttribute("transform", `rotate(${180 * r / Math.PI},${C},${x})`);
          }
          _basicDot(s) {
            const { size: i, x: a, y: r } = s, o = i / 7;
            this._rotateFigure(Object.assign(Object.assign({}, s), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("clip-rule", "evenodd"), this._element.setAttribute("d", `M ${a + i / 2} ${r}a ${i / 2} ${i / 2} 0 1 0 0.1 0zm 0 ${o}a ${i / 2 - o} ${i / 2 - o} 0 1 1 -0.1 0Z`);
            } }));
          }
          _basicSquare(s) {
            const { size: i, x: a, y: r } = s, o = i / 7;
            this._rotateFigure(Object.assign(Object.assign({}, s), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("clip-rule", "evenodd"), this._element.setAttribute("d", `M ${a} ${r}v ${i}h ${i}v ` + -i + `zM ${a + o} ${r + o}h ` + (i - 2 * o) + "v " + (i - 2 * o) + "h " + (2 * o - i) + "z");
            } }));
          }
          _basicExtraRounded(s) {
            const { size: i, x: a, y: r } = s, o = i / 7;
            this._rotateFigure(Object.assign(Object.assign({}, s), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "path"), this._element.setAttribute("clip-rule", "evenodd"), this._element.setAttribute("d", `M ${a} ${r + 2.5 * o}v ` + 2 * o + `a ${2.5 * o} ${2.5 * o}, 0, 0, 0, ${2.5 * o} ${2.5 * o}h ` + 2 * o + `a ${2.5 * o} ${2.5 * o}, 0, 0, 0, ${2.5 * o} ${2.5 * -o}v ` + -2 * o + `a ${2.5 * o} ${2.5 * o}, 0, 0, 0, ${2.5 * -o} ${2.5 * -o}h ` + -2 * o + `a ${2.5 * o} ${2.5 * o}, 0, 0, 0, ${2.5 * -o} ${2.5 * o}M ${a + 2.5 * o} ${r + o}h ` + 2 * o + `a ${1.5 * o} ${1.5 * o}, 0, 0, 1, ${1.5 * o} ${1.5 * o}v ` + 2 * o + `a ${1.5 * o} ${1.5 * o}, 0, 0, 1, ${1.5 * -o} ${1.5 * o}h ` + -2 * o + `a ${1.5 * o} ${1.5 * o}, 0, 0, 1, ${1.5 * -o} ${1.5 * -o}v ` + -2 * o + `a ${1.5 * o} ${1.5 * o}, 0, 0, 1, ${1.5 * o} ${1.5 * -o}`);
            } }));
          }
          _drawDot({ x: s, y: i, size: a, rotation: r }) {
            this._basicDot({ x: s, y: i, size: a, rotation: r });
          }
          _drawSquare({ x: s, y: i, size: a, rotation: r }) {
            this._basicSquare({ x: s, y: i, size: a, rotation: r });
          }
          _drawExtraRounded({ x: s, y: i, size: a, rotation: r }) {
            this._basicExtraRounded({ x: s, y: i, size: a, rotation: r });
          }
        }
        const B = { dot: "dot", square: "square" }, k = Object.values(B);
        class F {
          constructor({ svg: s, type: i, window: a }) {
            this._svg = s, this._type = i, this._window = a;
          }
          draw(s, i, a, r) {
            let o;
            o = this._type === B.square ? this._drawSquare : this._drawDot, o.call(this, { x: s, y: i, size: a, rotation: r });
          }
          _rotateFigure({ x: s, y: i, size: a, rotation: r = 0, draw: o }) {
            var u;
            const C = s + a / 2, x = i + a / 2;
            o(), (u = this._element) === null || u === void 0 || u.setAttribute("transform", `rotate(${180 * r / Math.PI},${C},${x})`);
          }
          _basicDot(s) {
            const { size: i, x: a, y: r } = s;
            this._rotateFigure(Object.assign(Object.assign({}, s), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "circle"), this._element.setAttribute("cx", String(a + i / 2)), this._element.setAttribute("cy", String(r + i / 2)), this._element.setAttribute("r", String(i / 2));
            } }));
          }
          _basicSquare(s) {
            const { size: i, x: a, y: r } = s;
            this._rotateFigure(Object.assign(Object.assign({}, s), { draw: () => {
              this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "rect"), this._element.setAttribute("x", String(a)), this._element.setAttribute("y", String(r)), this._element.setAttribute("width", String(i)), this._element.setAttribute("height", String(i));
            } }));
          }
          _drawDot({ x: s, y: i, size: a, rotation: r }) {
            this._basicDot({ x: s, y: i, size: a, rotation: r });
          }
          _drawSquare({ x: s, y: i, size: a, rotation: r }) {
            this._basicSquare({ x: s, y: i, size: a, rotation: r });
          }
        }
        const Y = "circle", G = [[1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1]], Q = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];
        class ne {
          constructor(s, i) {
            this._roundSize = (a) => this._options.dotsOptions.roundSize ? Math.floor(a) : a, this._window = i, this._element = this._window.document.createElementNS("http://www.w3.org/2000/svg", "svg"), this._element.setAttribute("width", String(s.width)), this._element.setAttribute("height", String(s.height)), this._element.setAttribute("xmlns:xlink", "http://www.w3.org/1999/xlink"), s.dotsOptions.roundSize || this._element.setAttribute("shape-rendering", "crispEdges"), this._element.setAttribute("viewBox", `0 0 ${s.width} ${s.height}`), this._defs = this._window.document.createElementNS("http://www.w3.org/2000/svg", "defs"), this._element.appendChild(this._defs), this._imageUri = s.image, this._instanceId = ne.instanceCount++, this._options = s;
          }
          get width() {
            return this._options.width;
          }
          get height() {
            return this._options.height;
          }
          getElement() {
            return this._element;
          }
          async drawQR(s) {
            const i = s.getModuleCount(), a = Math.min(this._options.width, this._options.height) - 2 * this._options.margin, r = this._options.shape === Y ? a / Math.sqrt(2) : a, o = this._roundSize(r / i);
            let u = { hideXDots: 0, hideYDots: 0, width: 0, height: 0 };
            if (this._qr = s, this._options.image) {
              if (await this.loadImage(), !this._image) return;
              const { imageOptions: C, qrOptions: x } = this._options, $ = C.imageSize * A[x.errorCorrectionLevel], M = Math.floor($ * i * i);
              u = function({ originalHeight: R, originalWidth: z, maxHiddenDots: O, maxHiddenAxisDots: U, dotSize: N }) {
                const d = { x: 0, y: 0 }, g = { x: 0, y: 0 };
                if (R <= 0 || z <= 0 || O <= 0 || N <= 0) return { height: 0, width: 0, hideYDots: 0, hideXDots: 0 };
                const c = R / z;
                return d.x = Math.floor(Math.sqrt(O / c)), d.x <= 0 && (d.x = 1), U && U < d.x && (d.x = U), d.x % 2 == 0 && d.x--, g.x = d.x * N, d.y = 1 + 2 * Math.ceil((d.x * c - 1) / 2), g.y = Math.round(g.x * c), (d.y * d.x > O || U && U < d.y) && (U && U < d.y ? (d.y = U, d.y % 2 == 0 && d.x--) : d.y -= 2, g.y = d.y * N, d.x = 1 + 2 * Math.ceil((d.y / c - 1) / 2), g.x = Math.round(g.y / c)), { height: g.y, width: g.x, hideYDots: d.y, hideXDots: d.x };
              }({ originalWidth: this._image.width, originalHeight: this._image.height, maxHiddenDots: M, maxHiddenAxisDots: i - 14, dotSize: o });
            }
            this.drawBackground(), this.drawDots((C, x) => {
              var $, M, R, z, O, U;
              return !(this._options.imageOptions.hideBackgroundDots && C >= (i - u.hideYDots) / 2 && C < (i + u.hideYDots) / 2 && x >= (i - u.hideXDots) / 2 && x < (i + u.hideXDots) / 2 || !(($ = G[C]) === null || $ === void 0) && $[x] || !((M = G[C - i + 7]) === null || M === void 0) && M[x] || !((R = G[C]) === null || R === void 0) && R[x - i + 7] || !((z = Q[C]) === null || z === void 0) && z[x] || !((O = Q[C - i + 7]) === null || O === void 0) && O[x] || !((U = Q[C]) === null || U === void 0) && U[x - i + 7]);
            }), this.drawCorners(), this._options.image && await this.drawImage({ width: u.width, height: u.height, count: i, dotSize: o });
          }
          drawBackground() {
            var s, i, a;
            const r = this._element, o = this._options;
            if (r) {
              const u = (s = o.backgroundOptions) === null || s === void 0 ? void 0 : s.gradient, C = (i = o.backgroundOptions) === null || i === void 0 ? void 0 : i.color;
              let x = o.height, $ = o.width;
              if (u || C) {
                const M = this._window.document.createElementNS("http://www.w3.org/2000/svg", "rect");
                this._backgroundClipPath = this._window.document.createElementNS("http://www.w3.org/2000/svg", "clipPath"), this._backgroundClipPath.setAttribute("id", `clip-path-background-color-${this._instanceId}`), this._defs.appendChild(this._backgroundClipPath), !((a = o.backgroundOptions) === null || a === void 0) && a.round && (x = $ = Math.min(o.width, o.height), M.setAttribute("rx", String(x / 2 * o.backgroundOptions.round))), M.setAttribute("x", String(this._roundSize((o.width - $) / 2))), M.setAttribute("y", String(this._roundSize((o.height - x) / 2))), M.setAttribute("width", String($)), M.setAttribute("height", String(x)), this._backgroundClipPath.appendChild(M), this._createColor({ options: u, color: C, additionalRotation: 0, x: 0, y: 0, height: o.height, width: o.width, name: `background-color-${this._instanceId}` });
              }
            }
          }
          drawDots(s) {
            var i, a;
            if (!this._qr) throw "QR code is not defined";
            const r = this._options, o = this._qr.getModuleCount();
            if (o > r.width || o > r.height) throw "The canvas is too small.";
            const u = Math.min(r.width, r.height) - 2 * r.margin, C = r.shape === Y ? u / Math.sqrt(2) : u, x = this._roundSize(C / o), $ = this._roundSize((r.width - o * x) / 2), M = this._roundSize((r.height - o * x) / 2), R = new L({ svg: this._element, type: r.dotsOptions.type, window: this._window });
            this._dotsClipPath = this._window.document.createElementNS("http://www.w3.org/2000/svg", "clipPath"), this._dotsClipPath.setAttribute("id", `clip-path-dot-color-${this._instanceId}`), this._defs.appendChild(this._dotsClipPath), this._createColor({ options: (i = r.dotsOptions) === null || i === void 0 ? void 0 : i.gradient, color: r.dotsOptions.color, additionalRotation: 0, x: 0, y: 0, height: r.height, width: r.width, name: `dot-color-${this._instanceId}` });
            for (let z = 0; z < o; z++) for (let O = 0; O < o; O++) s && !s(z, O) || !((a = this._qr) === null || a === void 0) && a.isDark(z, O) && (R.draw($ + O * x, M + z * x, x, (U, N) => !(O + U < 0 || z + N < 0 || O + U >= o || z + N >= o) && !(s && !s(z + N, O + U)) && !!this._qr && this._qr.isDark(z + N, O + U)), R._element && this._dotsClipPath && this._dotsClipPath.appendChild(R._element));
            if (r.shape === Y) {
              const z = this._roundSize((u / x - o) / 2), O = o + 2 * z, U = $ - z * x, N = M - z * x, d = [], g = this._roundSize(O / 2);
              for (let c = 0; c < O; c++) {
                d[c] = [];
                for (let f = 0; f < O; f++) c >= z - 1 && c <= O - z && f >= z - 1 && f <= O - z || Math.sqrt((c - g) * (c - g) + (f - g) * (f - g)) > g ? d[c][f] = 0 : d[c][f] = this._qr.isDark(f - 2 * z < 0 ? f : f >= o ? f - 2 * z : f - z, c - 2 * z < 0 ? c : c >= o ? c - 2 * z : c - z) ? 1 : 0;
              }
              for (let c = 0; c < O; c++) for (let f = 0; f < O; f++) d[c][f] && (R.draw(U + f * x, N + c * x, x, (w, P) => {
                var T;
                return !!(!((T = d[c + P]) === null || T === void 0) && T[f + w]);
              }), R._element && this._dotsClipPath && this._dotsClipPath.appendChild(R._element));
            }
          }
          drawCorners() {
            if (!this._qr) throw "QR code is not defined";
            const s = this._element, i = this._options;
            if (!s) throw "Element code is not defined";
            const a = this._qr.getModuleCount(), r = Math.min(i.width, i.height) - 2 * i.margin, o = i.shape === Y ? r / Math.sqrt(2) : r, u = this._roundSize(o / a), C = 7 * u, x = 3 * u, $ = this._roundSize((i.width - a * u) / 2), M = this._roundSize((i.height - a * u) / 2);
            [[0, 0, 0], [1, 0, Math.PI / 2], [0, 1, -Math.PI / 2]].forEach(([R, z, O]) => {
              var U, N, d, g, c, f, w, P, T, j, K, Z, J, ae;
              const se = $ + R * u * (a - 7), ee = M + z * u * (a - 7);
              let W = this._dotsClipPath, q = this._dotsClipPath;
              if ((!((U = i.cornersSquareOptions) === null || U === void 0) && U.gradient || !((N = i.cornersSquareOptions) === null || N === void 0) && N.color) && (W = this._window.document.createElementNS("http://www.w3.org/2000/svg", "clipPath"), W.setAttribute("id", `clip-path-corners-square-color-${R}-${z}-${this._instanceId}`), this._defs.appendChild(W), this._cornersSquareClipPath = this._cornersDotClipPath = q = W, this._createColor({ options: (d = i.cornersSquareOptions) === null || d === void 0 ? void 0 : d.gradient, color: (g = i.cornersSquareOptions) === null || g === void 0 ? void 0 : g.color, additionalRotation: O, x: se, y: ee, height: C, width: C, name: `corners-square-color-${R}-${z}-${this._instanceId}` })), ((c = i.cornersSquareOptions) === null || c === void 0 ? void 0 : c.type) && X.includes(i.cornersSquareOptions.type)) {
                const ie = new I({ svg: this._element, type: i.cornersSquareOptions.type, window: this._window });
                ie.draw(se, ee, C, O), ie._element && W && W.appendChild(ie._element);
              } else {
                const ie = new L({ svg: this._element, type: ((f = i.cornersSquareOptions) === null || f === void 0 ? void 0 : f.type) || i.dotsOptions.type, window: this._window });
                for (let oe = 0; oe < G.length; oe++) for (let H = 0; H < G[oe].length; H++) !((w = G[oe]) === null || w === void 0) && w[H] && (ie.draw(se + H * u, ee + oe * u, u, (de, le) => {
                  var re;
                  return !!(!((re = G[oe + le]) === null || re === void 0) && re[H + de]);
                }), ie._element && W && W.appendChild(ie._element));
              }
              if ((!((P = i.cornersDotOptions) === null || P === void 0) && P.gradient || !((T = i.cornersDotOptions) === null || T === void 0) && T.color) && (q = this._window.document.createElementNS("http://www.w3.org/2000/svg", "clipPath"), q.setAttribute("id", `clip-path-corners-dot-color-${R}-${z}-${this._instanceId}`), this._defs.appendChild(q), this._cornersDotClipPath = q, this._createColor({ options: (j = i.cornersDotOptions) === null || j === void 0 ? void 0 : j.gradient, color: (K = i.cornersDotOptions) === null || K === void 0 ? void 0 : K.color, additionalRotation: O, x: se + 2 * u, y: ee + 2 * u, height: x, width: x, name: `corners-dot-color-${R}-${z}-${this._instanceId}` })), ((Z = i.cornersDotOptions) === null || Z === void 0 ? void 0 : Z.type) && k.includes(i.cornersDotOptions.type)) {
                const ie = new F({ svg: this._element, type: i.cornersDotOptions.type, window: this._window });
                ie.draw(se + 2 * u, ee + 2 * u, x, O), ie._element && q && q.appendChild(ie._element);
              } else {
                const ie = new L({ svg: this._element, type: ((J = i.cornersDotOptions) === null || J === void 0 ? void 0 : J.type) || i.dotsOptions.type, window: this._window });
                for (let oe = 0; oe < Q.length; oe++) for (let H = 0; H < Q[oe].length; H++) !((ae = Q[oe]) === null || ae === void 0) && ae[H] && (ie.draw(se + H * u, ee + oe * u, u, (de, le) => {
                  var re;
                  return !!(!((re = Q[oe + le]) === null || re === void 0) && re[H + de]);
                }), ie._element && q && q.appendChild(ie._element));
              }
            });
          }
          loadImage() {
            return new Promise((s, i) => {
              var a;
              const r = this._options;
              if (!r.image) return i("Image is not defined");
              if (!((a = r.nodeCanvas) === null || a === void 0) && a.loadImage) r.nodeCanvas.loadImage(r.image).then((o) => {
                var u, C;
                if (this._image = o, this._options.imageOptions.saveAsBlob) {
                  const x = (u = r.nodeCanvas) === null || u === void 0 ? void 0 : u.createCanvas(this._image.width, this._image.height);
                  (C = x == null ? void 0 : x.getContext("2d")) === null || C === void 0 || C.drawImage(o, 0, 0), this._imageUri = x == null ? void 0 : x.toDataURL();
                }
                s();
              }).catch(i);
              else {
                const o = new this._window.Image();
                typeof r.imageOptions.crossOrigin == "string" && (o.crossOrigin = r.imageOptions.crossOrigin), this._image = o, o.onload = async () => {
                  this._options.imageOptions.saveAsBlob && (this._imageUri = await async function(u, C) {
                    return new Promise((x) => {
                      const $ = new C.XMLHttpRequest();
                      $.onload = function() {
                        const M = new C.FileReader();
                        M.onloadend = function() {
                          x(M.result);
                        }, M.readAsDataURL($.response);
                      }, $.open("GET", u), $.responseType = "blob", $.send();
                    });
                  }(r.image || "", this._window)), s();
                }, o.src = r.image;
              }
            });
          }
          async drawImage({ width: s, height: i, count: a, dotSize: r }) {
            const o = this._options, u = this._roundSize((o.width - a * r) / 2), C = this._roundSize((o.height - a * r) / 2), x = u + this._roundSize(o.imageOptions.margin + (a * r - s) / 2), $ = C + this._roundSize(o.imageOptions.margin + (a * r - i) / 2), M = s - 2 * o.imageOptions.margin, R = i - 2 * o.imageOptions.margin, z = this._window.document.createElementNS("http://www.w3.org/2000/svg", "image");
            z.setAttribute("href", this._imageUri || ""), z.setAttribute("xlink:href", this._imageUri || ""), z.setAttribute("x", String(x)), z.setAttribute("y", String($)), z.setAttribute("width", `${M}px`), z.setAttribute("height", `${R}px`), this._element.appendChild(z);
          }
          _createColor({ options: s, color: i, additionalRotation: a, x: r, y: o, height: u, width: C, name: x }) {
            const $ = C > u ? C : u, M = this._window.document.createElementNS("http://www.w3.org/2000/svg", "rect");
            if (M.setAttribute("x", String(r)), M.setAttribute("y", String(o)), M.setAttribute("height", String(u)), M.setAttribute("width", String(C)), M.setAttribute("clip-path", `url('#clip-path-${x}')`), s) {
              let R;
              if (s.type === "radial") R = this._window.document.createElementNS("http://www.w3.org/2000/svg", "radialGradient"), R.setAttribute("id", x), R.setAttribute("gradientUnits", "userSpaceOnUse"), R.setAttribute("fx", String(r + C / 2)), R.setAttribute("fy", String(o + u / 2)), R.setAttribute("cx", String(r + C / 2)), R.setAttribute("cy", String(o + u / 2)), R.setAttribute("r", String($ / 2));
              else {
                const z = ((s.rotation || 0) + a) % (2 * Math.PI), O = (z + 2 * Math.PI) % (2 * Math.PI);
                let U = r + C / 2, N = o + u / 2, d = r + C / 2, g = o + u / 2;
                O >= 0 && O <= 0.25 * Math.PI || O > 1.75 * Math.PI && O <= 2 * Math.PI ? (U -= C / 2, N -= u / 2 * Math.tan(z), d += C / 2, g += u / 2 * Math.tan(z)) : O > 0.25 * Math.PI && O <= 0.75 * Math.PI ? (N -= u / 2, U -= C / 2 / Math.tan(z), g += u / 2, d += C / 2 / Math.tan(z)) : O > 0.75 * Math.PI && O <= 1.25 * Math.PI ? (U += C / 2, N += u / 2 * Math.tan(z), d -= C / 2, g -= u / 2 * Math.tan(z)) : O > 1.25 * Math.PI && O <= 1.75 * Math.PI && (N += u / 2, U += C / 2 / Math.tan(z), g -= u / 2, d -= C / 2 / Math.tan(z)), R = this._window.document.createElementNS("http://www.w3.org/2000/svg", "linearGradient"), R.setAttribute("id", x), R.setAttribute("gradientUnits", "userSpaceOnUse"), R.setAttribute("x1", String(Math.round(U))), R.setAttribute("y1", String(Math.round(N))), R.setAttribute("x2", String(Math.round(d))), R.setAttribute("y2", String(Math.round(g)));
              }
              s.colorStops.forEach(({ offset: z, color: O }) => {
                const U = this._window.document.createElementNS("http://www.w3.org/2000/svg", "stop");
                U.setAttribute("offset", 100 * z + "%"), U.setAttribute("stop-color", O), R.appendChild(U);
              }), M.setAttribute("fill", `url('#${x}')`), this._defs.appendChild(R);
            } else i && M.setAttribute("fill", i);
            this._element.appendChild(M);
          }
        }
        ne.instanceCount = 0;
        const he = ne, ue = "canvas", Se = {};
        for (let m = 0; m <= 40; m++) Se[m] = m;
        const xe = { type: ue, shape: "square", width: 300, height: 300, data: "", margin: 0, qrOptions: { typeNumber: Se[0], mode: void 0, errorCorrectionLevel: "Q" }, imageOptions: { saveAsBlob: !0, hideBackgroundDots: !0, imageSize: 0.4, crossOrigin: void 0, margin: 0 }, dotsOptions: { type: "square", color: "#000", roundSize: !0 }, backgroundOptions: { round: 0, color: "#fff" } };
        function pe(m) {
          const s = Object.assign({}, m);
          if (!s.colorStops || !s.colorStops.length) throw "Field 'colorStops' is required in gradient";
          return s.rotation ? s.rotation = Number(s.rotation) : s.rotation = 0, s.colorStops = s.colorStops.map((i) => Object.assign(Object.assign({}, i), { offset: Number(i.offset) })), s;
        }
        function _e(m) {
          const s = Object.assign({}, m);
          return s.width = Number(s.width), s.height = Number(s.height), s.margin = Number(s.margin), s.imageOptions = Object.assign(Object.assign({}, s.imageOptions), { hideBackgroundDots: !!s.imageOptions.hideBackgroundDots, imageSize: Number(s.imageOptions.imageSize), margin: Number(s.imageOptions.margin) }), s.margin > Math.min(s.width, s.height) && (s.margin = Math.min(s.width, s.height)), s.dotsOptions = Object.assign({}, s.dotsOptions), s.dotsOptions.gradient && (s.dotsOptions.gradient = pe(s.dotsOptions.gradient)), s.cornersSquareOptions && (s.cornersSquareOptions = Object.assign({}, s.cornersSquareOptions), s.cornersSquareOptions.gradient && (s.cornersSquareOptions.gradient = pe(s.cornersSquareOptions.gradient))), s.cornersDotOptions && (s.cornersDotOptions = Object.assign({}, s.cornersDotOptions), s.cornersDotOptions.gradient && (s.cornersDotOptions.gradient = pe(s.cornersDotOptions.gradient))), s.backgroundOptions && (s.backgroundOptions = Object.assign({}, s.backgroundOptions), s.backgroundOptions.gradient && (s.backgroundOptions.gradient = pe(s.backgroundOptions.gradient))), s;
        }
        var Ce = l(873), ke = l.n(Ce);
        function me(m) {
          if (!m) throw new Error("Extension must be defined");
          m[0] === "." && (m = m.substring(1));
          const s = { bmp: "image/bmp", gif: "image/gif", ico: "image/vnd.microsoft.icon", jpeg: "image/jpeg", jpg: "image/jpeg", png: "image/png", svg: "image/svg+xml", tif: "image/tiff", tiff: "image/tiff", webp: "image/webp", pdf: "application/pdf" }[m.toLowerCase()];
          if (!s) throw new Error(`Extension "${m}" is not supported`);
          return s;
        }
        class v {
          constructor(s) {
            s != null && s.jsdom ? this._window = new s.jsdom("", { resources: "usable" }).window : this._window = window, this._options = s ? _e(_(xe, s)) : xe, this.update();
          }
          static _clearContainer(s) {
            s && (s.innerHTML = "");
          }
          _setupSvg() {
            if (!this._qr) return;
            const s = new he(this._options, this._window);
            this._svg = s.getElement(), this._svgDrawingPromise = s.drawQR(this._qr).then(() => {
              var i;
              this._svg && ((i = this._extension) === null || i === void 0 || i.call(this, s.getElement(), this._options));
            });
          }
          _setupCanvas() {
            var s, i;
            this._qr && (!((s = this._options.nodeCanvas) === null || s === void 0) && s.createCanvas ? (this._nodeCanvas = this._options.nodeCanvas.createCanvas(this._options.width, this._options.height), this._nodeCanvas.width = this._options.width, this._nodeCanvas.height = this._options.height) : (this._domCanvas = document.createElement("canvas"), this._domCanvas.width = this._options.width, this._domCanvas.height = this._options.height), this._setupSvg(), this._canvasDrawingPromise = (i = this._svgDrawingPromise) === null || i === void 0 ? void 0 : i.then(() => {
              var a;
              if (!this._svg) return;
              const r = this._svg, o = new this._window.XMLSerializer().serializeToString(r), u = btoa(o), C = `data:${me("svg")};base64,${u}`;
              if (!((a = this._options.nodeCanvas) === null || a === void 0) && a.loadImage) return this._options.nodeCanvas.loadImage(C).then((x) => {
                var $, M;
                x.width = this._options.width, x.height = this._options.height, (M = ($ = this._nodeCanvas) === null || $ === void 0 ? void 0 : $.getContext("2d")) === null || M === void 0 || M.drawImage(x, 0, 0);
              });
              {
                const x = new this._window.Image();
                return new Promise(($) => {
                  x.onload = () => {
                    var M, R;
                    (R = (M = this._domCanvas) === null || M === void 0 ? void 0 : M.getContext("2d")) === null || R === void 0 || R.drawImage(x, 0, 0), $();
                  }, x.src = C;
                });
              }
            }));
          }
          async _getElement(s = "png") {
            if (!this._qr) throw "QR code is empty";
            return s.toLowerCase() === "svg" ? (this._svg && this._svgDrawingPromise || this._setupSvg(), await this._svgDrawingPromise, this._svg) : ((this._domCanvas || this._nodeCanvas) && this._canvasDrawingPromise || this._setupCanvas(), await this._canvasDrawingPromise, this._domCanvas || this._nodeCanvas);
          }
          update(s) {
            v._clearContainer(this._container), this._options = s ? _e(_(this._options, s)) : this._options, this._options.data && (this._qr = ke()(this._options.qrOptions.typeNumber, this._options.qrOptions.errorCorrectionLevel), this._qr.addData(this._options.data, this._options.qrOptions.mode || function(i) {
              switch (!0) {
                case /^[0-9]*$/.test(i):
                  return "Numeric";
                case /^[0-9A-Z $%*+\-./:]*$/.test(i):
                  return "Alphanumeric";
                default:
                  return "Byte";
              }
            }(this._options.data)), this._qr.make(), this._options.type === ue ? this._setupCanvas() : this._setupSvg(), this.append(this._container));
          }
          append(s) {
            if (s) {
              if (typeof s.appendChild != "function") throw "Container should be a single DOM node";
              this._options.type === ue ? this._domCanvas && s.appendChild(this._domCanvas) : this._svg && s.appendChild(this._svg), this._container = s;
            }
          }
          applyExtension(s) {
            if (!s) throw "Extension function should be defined.";
            this._extension = s, this.update();
          }
          deleteExtension() {
            this._extension = void 0, this.update();
          }
          async getRawData(s = "png") {
            if (!this._qr) throw "QR code is empty";
            const i = await this._getElement(s), a = me(s);
            if (!i) return null;
            if (s.toLowerCase() === "svg") {
              const r = `<?xml version="1.0" standalone="no"?>\r
${new this._window.XMLSerializer().serializeToString(i)}`;
              return typeof Blob > "u" || this._options.jsdom ? Buffer.from(r) : new Blob([r], { type: a });
            }
            return new Promise((r) => {
              const o = i;
              if ("toBuffer" in o) if (a === "image/png") r(o.toBuffer(a));
              else if (a === "image/jpeg") r(o.toBuffer(a));
              else {
                if (a !== "application/pdf") throw Error("Unsupported extension");
                r(o.toBuffer(a));
              }
              else "toBlob" in o && o.toBlob(r, a, 1);
            });
          }
          async download(s) {
            if (!this._qr) throw "QR code is empty";
            if (typeof Blob > "u") throw "Cannot download in Node.js, call getRawData instead.";
            let i = "png", a = "qr";
            typeof s == "string" ? (i = s, console.warn("Extension is deprecated as argument for 'download' method, please pass object { name: '...', extension: '...' } as argument")) : typeof s == "object" && s !== null && (s.name && (a = s.name), s.extension && (i = s.extension));
            const r = await this._getElement(i);
            if (r) if (i.toLowerCase() === "svg") {
              let o = new XMLSerializer().serializeToString(r);
              o = `<?xml version="1.0" standalone="no"?>\r
` + o, E(`data:${me(i)};charset=utf-8,${encodeURIComponent(o)}`, `${a}.svg`);
            } else E(r.toDataURL(me(i)), `${a}.${i}`);
          }
        }
        const y = v;
      })(), h.default;
    })());
  }(ze)), ze.exports;
}
var dt = lt();
const ct = /* @__PURE__ */ at(dt);
class ht {
  constructor() {
    this.currentQRCodeInstance = null;
  }
  /**
   * Loads an image URL to ensure it's valid before using it in the QR code.
   * @param {string} url - The URL of the image to load.
   * @returns {Promise<boolean>} A promise resolving to true if loaded successfully, false otherwise.
   * @private internal
   */
  async _loadImage(e) {
    return e ? new Promise((t) => {
      const n = new Image();
      n.onload = () => t(!0), n.onerror = n.onabort = () => {
        t(!1);
      }, n.src = e;
    }) : !1;
  }
  /**
   * Generates a styled QR code and appends it to the provided container element.
   * @param {HTMLElement} container - The DOM element to append the QR code to.
   * @param {string} dataUrl - The data (typically a URL) to encode in the QR code.
   * @param {object} qrConfig - Configuration object for styling the QR code (from modelData.qrCode).
   * @returns {Promise<QRCodeStyling | null>} A promise resolving with the QRCodeStyling instance or null on failure.
   */
  async generateAndAppend(e, t, n) {
    if (!e || !(e instanceof HTMLElement))
      return p.error("QRCodeService: Invalid container provided."), null;
    if (!t || typeof t != "string")
      return p.error("QRCodeService: Invalid dataUrl provided."), null;
    if (!n || typeof n != "object")
      return p.error("QRCodeService: Invalid qrConfig provided."), null;
    e.innerHTML = "", this.currentQRCodeInstance = null;
    let l = n.faviconUrl || null;
    l && (await this._loadImage(l) || (l = null));
    const h = {
      width: parseInt(n.QRsize) || 240,
      height: parseInt(n.QRsize) || 240,
      data: t,
      dotsOptions: {
        color: n.dotColor || "#000000",
        type: n.dotStyle || "square"
      },
      cornersSquareOptions: {
        color: n.cornerColor || "#000000",
        type: n.cornerStyle || "square"
      },
      cornersDotOptions: {
        color: n.cornerDotColor || "#000000",
        type: n.cornerDotStyle || "square"
      },
      backgroundOptions: {
        color: n.backgroundColor || "#FFFFFF"
      },
      qrOptions: {
        errorCorrectionLevel: "Q",
        typeNumber: 0
      },
      imageOptions: {
        hideBackgroundDots: !0,
        imageSize: 0.4,
        margin: parseInt(n.faviconMargin) || 4,
        crossOrigin: "anonymous"
      }
    };
    l ? h.image = l : (delete h.imageOptions, delete h.image);
    try {
      const b = new ct(h);
      return await b.append(e), p.debug("QR code appended successfully."), this.currentQRCodeInstance = b, b;
    } catch (b) {
      return p.error("Failed to create or append QR code:", b), e.innerHTML = '<p style="color: red; font-size: 12px;">Failed to generate QR code.</p>', null;
    }
  }
  /**
   * Clears the QR code from a specific container.
   * @param {HTMLElement} container - The container holding the QR code.
   */
  clearQRCode(e) {
    e && e instanceof HTMLElement && (e.innerHTML = ""), this.currentQRCodeInstance = null;
  }
  /**
   * Downloads the current QR code.
   * @param {string} [fileName='qrcode'] - The desired file name without extension.
   * @param {'png' | 'jpeg' | 'webp' | 'svg'} [extension='png'] - The desired file format.
   */
  async downloadQRCode(e = "qrcode", t = "png") {
    if (this.currentQRCodeInstance)
      try {
        await this.currentQRCodeInstance.download({
          name: e,
          extension: t
        }), p.debug(`QR code download initiated as ${e}.${t}`);
      } catch (n) {
        p.error("Failed to download QR code:", n);
      }
  }
}
const Te = new ht(), ut = "Powered by ARDisplay", pt = `${be}/favicon.png`;
function mt() {
  const S = V("a", {
    classList: ["ardisplay-powered-by"],
    attributes: {
      href: "https://www.ardisplay.net",
      // optional … or `"#"` if you don’t want it clickable
      target: "_blank",
      style: "text-decoration:none;color:gray;font-family:Arial,sans-serif;font-size:14px;display:flex;align-items:center;gap:4px;padding-block:10px;",
      rel: "noopener noreferrer",
      "aria-label": "ARDisplay website"
    }
  }), e = V("img", {
    attributes: {
      src: pt,
      alt: "Powered by ARDisplay",
      style: "width: 24px; height: 24px; object-fit: contain;"
    }
  }), t = document.createTextNode(ut);
  return S.appendChild(t), S.appendChild(e), S;
}
class gt {
  constructor() {
    this.isVisible = !1, this.modalElement = null, this.closeButtonElement = null, this.contentElement = null, this.qrCodeContainerElement = null, this.modelData = null, this._createElement(), this._attachEventListeners();
  }
  _createElement() {
    this.modalElement = V("div", {
      classList: ["ardisplay-qr-modal", "ardisplay-modal-overlay"],
      style: { display: "none" },
      attributes: {
        "aria-modal": "true",
        role: "dialog",
        "aria-labelledby": "qrModalTitle"
      }
    });
    const e = V("div", {
      classList: ["ardisplay-modal-dialog", "qr-modal-dialog-content"]
    }), t = ot({
      options: [{ posterFileUrl: "" }]
    }), n = document.createElement("template");
    n.innerHTML = t.trim(), this.contentElement = n.content.cloneNode(!0), this.qrCodeContainerElement = this.contentElement.querySelector(
      "#qr-code-modal-target"
    ), this.qrCodeContainerElement || p.error("QrModal: Missing '#qr-code-modal-target' in template.");
    const l = this.contentElement.querySelector(".qr-modal-title");
    l && (l.id = "qrModalTitle"), this.closeButtonElement = V("button", {
      classList: ["ardisplay-modal-close-button"],
      attributes: {
        type: "button",
        "aria-label": "Close QR Code Modal",
        style: "background:transparent"
      }
    }), this.closeButtonElement.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
        `, e.appendChild(this.closeButtonElement), e.appendChild(this.contentElement), this.modalElement.appendChild(e);
  }
  _attachEventListeners() {
    if (!this.modalElement) {
      p.error("QrModal: Cannot attach listeners, modalElement is null.");
      return;
    }
    this.closeButtonElement && this.closeButtonElement.addEventListener("click", this.hide.bind(this)), this.modalElement.addEventListener("click", (e) => {
      e.target === this.modalElement && this.hide();
    }), this.boundHandleKeydown = this._handleKeydown.bind(this);
  }
  _handleKeydown(e) {
    e.key === "Escape" && this.hide();
  }
  _updateContent(e) {
    var E, A;
    const t = this.modalElement.querySelector(
      ".qr-modal-dialog-content"
    );
    if (!t || !e) {
      p.error(
        "QrModal: Cannot update content, missing container or data."
      );
      return;
    }
    const n = t.querySelector(".qr-modal-title"), l = t.querySelector(
      ".qr-modal-description"
    ), h = t.querySelector(".qr-modal-poster"), b = t.querySelector(
      ".qr-modal-poster-placeholder"
    );
    n && (n.textContent = e.title || "Scan QR Code"), l && (l.textContent = e.description || "Scan the QR code with your device to view in AR.");
    const _ = ((A = (E = e.options) == null ? void 0 : E[0]) == null ? void 0 : A.posterFileUrl) || "";
    h && b && (_ ? (h.src = _, h.alt = `${e.title || "Product"} Poster`, h.style.display = "block", b.style.display = "none") : (h.style.display = "none", h.src = "", b.style.display = "flex"));
  }
  async show(e, t) {
    if (!this.modalElement) {
      p.error("QrModal: Cannot show modal, element not created.");
      return;
    }
    if (!e || !t) {
      p.error("QrModal: Missing required data to show modal.");
      return;
    }
    if (this.modelData = e, this.modalElement.isConnected || (Le(this.modalElement), this.qrCodeContainerElement = this.modalElement.querySelector(
      "#qr-code-modal-target"
    )), this._updateContent(e), this.qrCodeContainerElement && e.qrCode)
      try {
        this.qrCodeContainerElement.innerHTML = `
                    <div class="qr-code-loading">
                        <div class="qr-code-spinner"></div>
                        <p>Generating QR Code...</p>
                    </div>`, await Te.generateAndAppend(
          this.qrCodeContainerElement,
          t,
          e.qrCode
        ), this.qrCodeContainerElement.appendChild(mt());
      } catch (n) {
        p.error("QrModal: Failed to generate QR code.", n), this.qrCodeContainerElement.innerHTML = `
                    <div class="qr-error">
                        <p>Could not generate QR code.</p>
                        <button class="qr-retry-button">Retry</button>
                    </div>`;
        const l = this.qrCodeContainerElement.querySelector(".qr-retry-button");
        l && l.addEventListener("click", () => {
          this.show(e, t);
        });
      }
    else
      this.qrCodeContainerElement || p.error("QrModal: QR code container not found.");
    this.modalElement.style.display = "flex", setTimeout(() => {
      this.modalElement.classList.add("visible");
    }, 10), this.isVisible = !0, document.addEventListener("keydown", this.boundHandleKeydown), this.closeButtonElement && this.closeButtonElement.focus();
  }
  hide() {
    !this.modalElement || !this.isVisible || (this.modalElement.classList.remove("visible"), setTimeout(() => {
      this.modalElement.style.display = "none", this.isVisible = !1;
    }, 300), document.removeEventListener("keydown", this.boundHandleKeydown));
  }
  getElement() {
    return this.modalElement;
  }
}
function Pe(S) {
  let e = !1;
  return (...t) => {
    e || (e = !0, requestAnimationFrame(() => {
      S.apply(this, t), e = !1;
    }));
  };
}
function ft() {
  return /iPad|iPhone|iPod/.test(navigator.userAgent) || navigator.platform === "MacIntel" && navigator.maxTouchPoints > 1 && !window.MSStream;
}
function He() {
  let S = !1;
  try {
    document.createEvent("TouchEvent"), S = !0;
  } catch {
  }
  return /Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
    navigator.userAgent
  ) || ft() || S;
}
function Be(S) {
  var n, l;
  if (typeof S == "number")
    return S;
  if (typeof S != "string")
    return console.warn("Invalid input for convertToMeters:", S), 0;
  const e = parseFloat(S);
  if (isNaN(e))
    return console.warn("Could not parse numeric value from:", S), 0;
  switch (((l = (n = S.match(/[a-zA-Z]+/)) == null ? void 0 : n[0]) == null ? void 0 : l.toLowerCase()) || "m") {
    case "cm":
      return e / 100;
    case "mm":
      return e / 1e3;
    case "in":
    case "inch":
    case "inches":
      return e * 0.0254;
    case "ft":
    case "foot":
    case "feet":
      return e * 0.3048;
    case "m":
    default:
      return e;
  }
}
async function bt() {
  if (!navigator.xr)
    return !1;
  try {
    return await navigator.xr.isSessionSupported("immersive-ar");
  } catch (S) {
    return console.warn("WebXR support check failed:", S), !1;
  }
}
class yt {
  constructor() {
    this.statsEnabled = Ne.ENABLE_STATS_LOGGING, this.queue = [], this.isSending = !1, p.debug(
      `StatsService initialized. Logging ${this.statsEnabled ? "enabled" : "disabled"}.`
    );
  }
  /**
   * Sends a short statistics event to the backend.
   * @param {string} modelId - The ID of the model related to the event.
   * @param {string} action - The action being tracked (e.g., 'View', 'Click', 'Cart', 'Try', 'Failed').
   * @param {string} [message=''] - Optional additional information or error message.
   */
  async sendStatsEvent(e, t, n = "") {
    if (!this.statsEnabled || !e || !t)
      return;
    const l = {
      dmodelId: e,
      action: t,
      browser: navigator.userAgent || "Unknown",
      timestamp: (/* @__PURE__ */ new Date()).toISOString(),
      ...n && { message: n }
    };
    try {
      const h = await fetch(Me.SEND_STATS, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(l)
      });
      h.ok ? p.debug(`Stats event sent successfully: ${t} for ${e}`) : p.error(
        `Error sending stats: ${h.status} ${h.statusText}`
      );
    } catch (h) {
      p.error("Network error sending stats:", h);
    }
  }
}
const ve = new yt();
class wt {
  constructor() {
    this.isARSupported = null, this._initializeARSupportCheck();
  }
  /**
   * Initializes the AR support check asynchronously.
   * @private
   */
  async _initializeARSupportCheck() {
    this.isARSupported === null && (this.isARSupported = await bt(), p.debug(`AR Support Check Initialized: ${this.isARSupported}`));
  }
  /**
   * Returns the cached AR support status. Ensures the check has been performed.
   * @returns {Promise<boolean>} A promise resolving to true if AR is supported, false otherwise.
   */
  async checkARSupport() {
    return this.isARSupported === null && await this._initializeARSupportCheck(), this.isARSupported;
  }
  /**
   * Checks if the provided model-viewer element currently indicates it can activate AR.
   * This depends on the internal state of model-viewer (e.g., model loaded, environment understanding).
   * @param {HTMLElement} modelViewerElement - The <model-viewer> custom element.
   * @returns {boolean} True if model-viewer reports AR activation is possible.
   */
  canActivateAR(e) {
    return !e || typeof e.canActivateAR != "boolean" ? !1 : e.canActivateAR;
  }
  /**
   * Attempts to activate an AR session on the provided model-viewer element.
   * Sends statistics events for 'Try' and 'Failed' actions.
   * @param {HTMLElement} modelViewerElement - The <model-viewer> custom element.
   * @param {string} modelId - The ID of the model for stats reporting.
   * @returns {Promise<boolean>} A promise resolving to true if activation was attempted successfully (doesn't mean session started), false if activation failed immediately.
   */
  async activateAR(e, t) {
    if (!e || typeof e.activateAR != "function")
      return p.error(
        "ARService.activateAR: Invalid modelViewerElement provided."
      ), !1;
    if (!He() || !await this.checkARSupport() || !this.canActivateAR(e))
      return !1;
    ve.sendStatsEvent(t, "Try");
    try {
      return await e.activateAR(), p.debug("AR activation request initiated successfully."), !0;
    } catch (l) {
      return p.error(
        "Error occurred during modelViewerElement.activateAR():",
        l
      ), ve.sendStatsEvent(
        t,
        "Failed",
        l.message || "Activation error"
      ), !1;
    }
  }
  /**
   * Generates the fallback URL (typically for QR code) when AR fails or isn't desired.
   * @param {string} modelId - The ID of the model.
   * @returns {string | null} The fallback URL or null if modelId is missing.
   */
  getARFailureFallbackUrl(e) {
    return e ? `${Fe}/${e}` : null;
  }
  /**
   * Handles AR status changes emitted by the model-viewer element.
   * Can be used to toggle UI elements based on the AR state.
   * Note: Direct DOM manipulation is avoided here; the calling context should handle UI updates.
   * @param {object} eventDetail - The detail object from the 'ar-status' event.
   * @param {string} eventDetail.status - The current AR status (e.g., 'not-presenting', 'session-started', 'object-placed').
   * @returns {{ isSessionStarted: boolean, isObjectPlaced: boolean }} An object indicating the AR state.
   */
  getARStatusState(e) {
    const t = (e == null ? void 0 : e.status) || "not-presenting";
    return { isSessionStarted: t === "session-started" || t === "object-placed", isObjectPlaced: t === "object-placed" };
  }
}
const Oe = new wt(), vt = (S = {}) => {
  const t = { ...{
    title: "Scanning",
    description: "Stand several feet back. With camera facing floor, make sweeping motion side to side, up and down.",
    gifUrl: `${be}/floor.gif`
  }, ...S };
  return `
        <div class="ardisplay-steps-modal-content">
            <h3 class="ardisplay-instructions-title" style="color:transparent;margin-block:0;">Scanning</h3>
            <div class="ardisplay-steps-body">
                <img src="${t.gifUrl}" class="ardisplay-steps-gif" alt="Instruction animation" id="instructionGif">
                <div class="ardisplay-instructions-body" data-translate-id="instructions-body">${t.description}</div>
                 <!-- View on Wall button will be added dynamically on the last step -->
            </div>
            <div class="ardisplay-steps-footer">
                <!-- Skip button removed, can be added by component if needed -->
                <button class="ardisplay-next-button ardisplay-multi-button" data-translate-id="next">Next</button>
                <!-- Optional: Skip button -->
                <!-- <button class="ardisplay-skip-button ardisplay-multi-button" data-translate-id="skip">Skip</button> -->
            </div>
        </div>
    `;
};
class St {
  constructor() {
    this.blobCache = {}, this.cacheEnabled = Ne.USE_ASSET_CACHE, p.debug(
      `AssetCacheService initialized. Caching ${this.cacheEnabled ? "enabled" : "disabled"}.`
    );
  }
  /**
   * Fetches an asset (image, gif) and returns a Blob URL.
   * Uses an in-memory cache to avoid redundant fetches.
   * Falls back to the original URL on failure.
   * @param {string} assetUrl - The original URL of the asset.
   * @returns {Promise<string>} A promise resolving to the Blob URL or the original URL.
   */
  async getAssetBlobUrl(e) {
    if (!this.cacheEnabled)
      return e;
    if (!e || typeof e != "string")
      return "";
    const t = this.blobCache[e];
    if (t)
      return typeof t == "string" ? t : await t;
    const n = fetch(e).then((l) => {
      if (!l.ok)
        throw new Error(
          `Network response was not ok (status: ${l.status}) for ${e}`
        );
      return l.blob();
    }).then((l) => {
      const h = URL.createObjectURL(l);
      return this.blobCache[e] = h, h;
    }).catch((l) => (p.error(`Failed to load or cache asset: ${e}`, l), delete this.blobCache[e], e));
    return this.blobCache[e] = n, await n;
  }
  /**
   * Preloads an asset without returning the URL immediately.
   * Populates the cache in the background.
   * @param {string} assetUrl - The original URL of the asset to preload.
   * @returns {void}
   */
  preloadAsset(e) {
    !this.cacheEnabled || !e || this.blobCache[e] || this.getAssetBlobUrl(e);
  }
  /**
   * Revokes all created Blob URLs to free up memory.
   * Should be called when the component/application using the service is destroyed.
   */
  cleanup() {
    Object.entries(this.blobCache).forEach(([e, t]) => {
      if (typeof t == "string" && t.startsWith("blob:"))
        try {
          URL.revokeObjectURL(t), p.debug(`Revoked blob URL for: ${e}`);
        } catch {
        }
    }), this.blobCache = {};
  }
  /**
   * Removes a specific asset from the cache and revokes its blob URL if applicable.
   * @param {string} assetUrl - The original URL of the asset to remove.
   */
  removeFromCache(e) {
    const t = this.blobCache[e];
    if (t) {
      if (typeof t == "string" && t.startsWith("blob:"))
        try {
          URL.revokeObjectURL(t), p.debug(`Removed and revoked blob URL from cache: ${e}`);
        } catch {
        }
      delete this.blobCache[e];
    }
  }
}
const fe = new St(), xt = [
  // User's desired order
  {
    id: "selectVariantAndSize",
    title: "Choose Your Product",
    description: "Select your desired variant and size options below.",
    gif: null,
    isPoster: !1
  },
  {
    id: "scan",
    title: "Scan Environment",
    description: "Scan your environment.",
    gif: `${be}/floor.gif`,
    isPoster: !1
  },
  {
    id: "ready",
    title: "Ready to View",
    description: "Tap the button below to place the object.",
    gif: null,
    isPoster: !0
  }
], _t = "Powered by ARDisplay", Ct = `${be}/favicon.png`;
function qe() {
  const S = V("a", {
    classList: ["ardisplay-powered-by"],
    attributes: {
      href: "https://www.ardisplay.net",
      // optional … or `"#"` if you don’t want it clickable
      target: "_blank",
      style: "text-decoration:none;color:black;font-family:Arial,sans-serif;font-size:16px;display:flex;align-items:center;gap:4px;padding-block:10px;",
      rel: "noopener noreferrer",
      "aria-label": "ARDisplay website"
    }
  }), e = V("img", {
    attributes: {
      src: Ct,
      alt: "Powered by ARDisplay",
      style: "width: 24px; height: 24px; object-fit: contain;"
    }
  }), t = document.createTextNode(_t);
  return S.appendChild(t), S.appendChild(e), S;
}
class Et {
  constructor(e, t) {
    this.onModalVariantSelect = t || (() => {
    }), this.onPlaceObject = e || (() => {
    }), this.isVisible = !1, this.modalElement = null, this.closeButtonElement = null, this.dialogElement = null, this.contentElement = null, this.modelData = null, this.steps = [], this.currentStepIndex = 0, this.totalSteps = 0, this.selectedModalVariantIndex = 0, this.selectedModalSizeKey = null, this.titleElement = null, this.descriptionElement = null, this.imageElement = null, this.nextButtonElement = null, this.footerElement = null, this.headerElement = null, this.stepSpecificContentContainer = null, this.bodyElement = null, this.touchStartX = 0, this.touchEndX = 0, this.swipeThreshold = 50, this.boundHandleKeydown = this._handleKeydown.bind(this), this.boundHandleTouchStart = this._handleTouchStart.bind(this), this.boundHandleTouchEnd = this._handleTouchEnd.bind(this), this._createElement(), this._attachEventListeners();
  }
  _createElement() {
    this.modalElement = V("div", {
      classList: ["ardisplay-steps-modal-overlay", "ardisplay-modal-overlay"],
      style: { display: "none" },
      attributes: {
        "aria-modal": "true",
        role: "dialog",
        "aria-labelledby": "stepsModalTitle"
      }
    });
    const e = V("div", {
      classList: ["ardisplay-modal-overlay-bg"]
    });
    this.closeButtonElement = V("button", {
      classList: ["ardisplay-modal-close-button", "steps-overlay-close-button"],
      attributes: { type: "button", "aria-label": "Close Instructions" }
    }), e.appendChild(this.closeButtonElement), this.dialogElement = V("div", {
      classList: ["ardisplay-modal-dialog", "ardisplay-steps-modal-dialog"]
    });
    const t = vt({
      title: "",
      description: "",
      gifUrl: ""
    }), n = document.createElement("template");
    n.innerHTML = t, this.contentElement = n.content.cloneNode(!0), this.headerElement = this.contentElement.querySelector(
      ".ardisplay-steps-header"
    ), this.titleElement = this.contentElement.querySelector(
      ".ardisplay-instructions-title"
    ), this.bodyElement = this.contentElement.querySelector(
      ".ardisplay-steps-body"
    ), this.bodyElement || (p.error(
      "StepsModal _createElement: .ardisplay-steps-body not found in template!"
    ), this.bodyElement = this.contentElement), this.descriptionElement = this.bodyElement.querySelector(
      ".ardisplay-instructions-body"
    ), this.imageElement = this.bodyElement.querySelector("#instructionGif"), this.stepSpecificContentContainer = V("div", {
      classList: ["step-specific-content"]
    }), this.descriptionElement ? this.bodyElement.insertBefore(
      this.stepSpecificContentContainer,
      this.descriptionElement
    ) : this.bodyElement.prepend(this.stepSpecificContentContainer), this.footerElement = this.contentElement.querySelector(
      ".ardisplay-steps-footer"
    ), this.nextButtonElement = this.contentElement.querySelector(
      ".ardisplay-next-button"
    ), this.imageElement || p.error(
      "StepsModal: Could not find #instructionGif element in template!"
    ), this.titleElement && (this.titleElement.id = "stepsModalTitle"), this.dialogElement.appendChild(this.contentElement), this.modalElement.appendChild(e), this.modalElement.appendChild(this.dialogElement);
  }
  _attachEventListeners() {
    if (!this.modalElement || !this.closeButtonElement || !this.nextButtonElement || !this.dialogElement)
      return;
    this.closeButtonElement.addEventListener("click", this.hide.bind(this));
    const e = this.modalElement.querySelector(
      ".ardisplay-modal-overlay-bg"
    );
    e && e.addEventListener("click", (t) => {
      t.target === e && this.hide();
    }), this.nextButtonElement.addEventListener(
      "click",
      this._goToNextStep.bind(this)
    ), this.dialogElement.addEventListener(
      "touchstart",
      this.boundHandleTouchStart,
      { passive: !0 }
    ), this.dialogElement.addEventListener("touchend", this.boundHandleTouchEnd, {
      passive: !0
    });
  }
  _handleKeydown(e) {
    this.isVisible && (e.key === "Escape" ? this.hide() : e.key === "ArrowRight" ? this._goToNextStep() : e.key === "ArrowLeft" && this._goToPreviousStep());
  }
  _prepareSteps(e = "floor", t = null, n = null, l = 0, h = null) {
    var D, X;
    this.steps = [], p.debug("StepsModal _prepareSteps: Initializing steps preparation.", {
      placement: e,
      posterUrl: t,
      hasCustomSteps: !!(n && n.length > 0),
      modelDataOptionsCount: (X = (D = this.modelData) == null ? void 0 : D.options) == null ? void 0 : X.length,
      initialVariantIndex: l,
      initialSizeKey: h
    }), this.modelData && this.modelData.options && p.debug(
      "StepsModal _prepareSteps: this.modelData.options being used:",
      JSON.parse(JSON.stringify(this.modelData.options))
    );
    let b = !1;
    if (this.modelData && this.modelData.options) {
      const I = this.modelData.options.length > 1, B = this.modelData.options.some(
        (k) => k.sizes && k.sizes.filter((F) => F.label).length > 1
      );
      if (I || B) {
        const k = {
          id: "variantSizeSelection",
          // Use a consistent ID for this step type
          type: "variantSizeSelection",
          // Add a type property
          title: "Customize Your Item",
          description: "Select your preferred style and size.",
          variants: this.modelData.options,
          initialVariantIndex: l,
          initialSizeKey: h
        };
        this.steps.push(k), b = !0;
      }
    }
    const _ = JSON.parse(JSON.stringify(xt));
    n && n.length > 0 ? JSON.parse(JSON.stringify(n)).forEach((B) => {
      B.id === "variantSizeSelection" && b || B.id === "selectVariantAndSize" && b || (B.isPoster && t && (B.gif = t), this.steps.push(B));
    }) : _.forEach((I) => {
      I.id === "selectVariantAndSize" || this.steps.push(I);
    }), b && (this.steps = this.steps.filter(
      (I) => I.id !== "selectVariantAndSize"
    ));
    const E = this.steps.find((I) => I.id === "scan");
    if (E) {
      const I = e === "wall";
      E.title = I ? "Scan Wall" : "Scan Floor", E.description = `Stand several feet back. With camera facing ${I ? "wall" : "floor"}, make sweeping motion side to side, up and down.`, E.gif = I ? `${be}/wall.webp` : `${be}/floor.gif`, E.isPoster = !1;
    }
    const A = this.steps.find((I) => I.id === "ready");
    A && (A.description = `Tap the 'View on your ${e}' button below.`, A.gif = t, A.isPoster = !!t), this.totalSteps = this.steps.length, this.currentStepIndex = this.totalSteps > 0 ? 0 : -1;
    const L = this.steps.find(
      (I) => I.id !== "variantSizeSelection" && I.gif && !I.isPoster
    );
    L != null && L.gif && fe.preloadAsset(L.gif), A != null && A.gif && A.isPoster && fe.preloadAsset(A.gif), p.debug(
      `StepsModal: Final prepared steps (${this.totalSteps} total):`,
      JSON.parse(JSON.stringify(this.steps))
    );
  }
  _goToNextStep() {
    if (!this.modelData || !Array.isArray(this.modelData.options)) {
      p.error(
        "StepsModal._goToNextStep: Cannot proceed, modelData or options invalid."
      );
      return;
    }
    if (this.steps[this.currentStepIndex].type === "variantSizeSelection") {
      if (this.selectedModalVariantIndex < 0 || this.selectedModalVariantIndex >= this.modelData.options.length)
        return;
      const t = this.modelData.options[this.selectedModalVariantIndex];
      if (t && Array.isArray(t.sizes) && t.sizes.length > 1 && !this.selectedModalSizeKey)
        return;
    }
    if (this.currentStepIndex < this.totalSteps - 1) {
      this.currentStepIndex++, this._updateStepContent();
      const t = this.steps[this.currentStepIndex + 1];
      t != null && t.gif && !t.isPoster && fe.preloadAsset(t.gif);
    } else {
      p.debug(
        `StepsModal: Final action triggered from step index ${this.currentStepIndex}.`
      );
      const t = this.selectedModalVariantIndex !== -1 && this.modelData.options.length > this.selectedModalVariantIndex ? this.modelData.options[this.selectedModalVariantIndex] : null;
      let n = null;
      t && Array.isArray(t.sizes) && this.selectedModalSizeKey ? n = t.sizes.find(
        (l) => l.label.toLowerCase() === this.selectedModalSizeKey
      ) : t && Array.isArray(t.sizes) && t.sizes.length === 1 && (n = t.sizes[0]), this.onPlaceObject(t, n);
    }
  }
  _goToPreviousStep() {
    this.currentStepIndex > 0 && (this.currentStepIndex--, this._updateStepContent());
  }
  async _updateStepContent() {
    var t;
    if (!this.contentElement || this.currentStepIndex < 0 || this.currentStepIndex >= this.totalSteps || !this.steps[this.currentStepIndex]) {
      p.warn("StepsModal._updateStepContent: Invalid state.", {
        currentStepIndex: this.currentStepIndex,
        totalSteps: this.totalSteps
      }), this.titleElement && (this.titleElement.textContent = "Error"), this.descriptionElement && (this.descriptionElement.textContent = "Could not load step content."), this.imageElement && (this.imageElement.style.display = "none"), this.stepSpecificContentContainer && (this.stepSpecificContentContainer.innerHTML = ""), this.nextButtonElement && (this.nextButtonElement.disabled = !0);
      return;
    }
    const e = this.steps[this.currentStepIndex];
    if (p.debug(
      `Updating step content for index ${this.currentStepIndex}: ID: ${e.id}`,
      e
    ), this.stepSpecificContentContainer.innerHTML = "", this.imageElement.style.display = "block", this.descriptionElement && (this.descriptionElement.style.display = "block"), this.titleElement && (this.titleElement.textContent = e.title || ""), e.type === "variantSizeSelection")
      this.descriptionElement && (this.descriptionElement.textContent = e.description || ""), this.imageElement && (this.imageElement.style.display = "none"), this._renderVariantAndSizeSelectors();
    else {
      this.descriptionElement && (this.descriptionElement.textContent = e.description || "");
      let n = e.gif;
      if (e.id === "ready") {
        let l = null;
        this.modelData && this.modelData.options && this.selectedModalVariantIndex >= 0 && this.selectedModalVariantIndex < this.modelData.options.length && (l = (t = this.modelData.options[this.selectedModalVariantIndex]) == null ? void 0 : t.posterFileUrl), l ? (n = l, e.isPoster = !0, p.debug(
          `StepsModal ('ready' step): Using poster from selected variant ${this.selectedModalVariantIndex}: ${n}`
        )) : (p.warn(
          `StepsModal ('ready' step): No poster for selected variant ${this.selectedModalVariantIndex}. Fallback to step.gif or hide.`
        ), e.isPoster = !1);
      }
      if (this.imageElement)
        if (n) {
          this.imageElement.style.display = "block", this.imageElement.src = "", this.imageElement.classList.add("loading-gif");
          try {
            const l = await fe.getAssetBlobUrl(
              n
            );
            this.imageElement.src = l, this.imageElement.alt = e.title || (e.isPoster ? "Product preview" : "Instruction animation"), this.imageElement.classList.toggle(
              "is-poster",
              !!e.isPoster
            ), this.imageElement.style.objectFit = e.isPoster ? "contain" : "cover";
          } catch (l) {
            p.error(
              `StepsModal: Failed to load image for step ${this.currentStepIndex}: ${n}`,
              l
            ), this.imageElement.src = n, this.imageElement.classList.remove("is-poster"), this.imageElement.style.objectFit = "cover";
          } finally {
            this.imageElement.classList.remove("loading-gif"), this.isVisible || (this.imageElement.style.display = "none");
          }
        } else
          this.imageElement.style.display = "none", this.imageElement.src = "", this.imageElement.alt = "", this.imageElement.classList.remove("is-poster", "loading-gif");
    }
    this._updateFooterButton(e), this._updateStepIndicators();
  }
  _renderVariantAndSizeSelectors() {
    var l, h, b, _, E, A, L;
    if (!this.stepSpecificContentContainer) {
      p.error(
        "StepsModal._renderVariantAndSizeSelectors: stepSpecificContentContainer is null! Cannot render selectors."
      );
      return;
    }
    if (this.stepSpecificContentContainer.innerHTML = "", p.debug(
      "StepsModal._renderVariantAndSizeSelectors: Called. Current modal selections:",
      {
        variantIndex: this.selectedModalVariantIndex,
        sizeKey: this.selectedModalSizeKey
      }
    ), p.debug(
      "StepsModal._renderVariantAndSizeSelectors: Full modelData available to modal:",
      JSON.parse(JSON.stringify(this.modelData || {}))
    ), !this.modelData || !Array.isArray(this.modelData.options) || this.modelData.options.length === 0) {
      const D = V("p", {
        textContent: "Product options are currently unavailable."
      });
      this.stepSpecificContentContainer.appendChild(D), this.nextButtonElement && (this.nextButtonElement.disabled = !0);
      return;
    }
    if (this.nextButtonElement && (this.nextButtonElement.disabled = !1), this.selectedModalVariantIndex < 0 || this.selectedModalVariantIndex >= this.modelData.options.length) {
      p.warn(
        `StepsModal: Invalid selectedModalVariantIndex (${this.selectedModalVariantIndex}), defaulting to 0.`
      ), this.selectedModalVariantIndex = this.modelData.options.length > 0 ? 0 : -1;
      const D = this.selectedModalVariantIndex !== -1 ? this.modelData.options[this.selectedModalVariantIndex] : null;
      this.selectedModalSizeKey = ((b = (h = (l = D == null ? void 0 : D.sizes) == null ? void 0 : l[0]) == null ? void 0 : h.label) == null ? void 0 : b.toLowerCase()) || null;
    }
    const e = this.modelData.options, t = this.selectedModalVariantIndex >= 0 && this.selectedModalVariantIndex < e.length ? e[this.selectedModalVariantIndex] : null;
    if (e.length > 1) {
      const D = V("div", {
        classList: ["modal-variants-container"]
      }), X = V("h4", {
        textContent: "Select Style:",
        classList: ["modal-selector-title"]
      });
      D.appendChild(X);
      const I = V("div", {
        classList: ["modal-variant-slides"]
      });
      e.forEach((B, k) => {
        var Y;
        const F = V("button", {
          classList: ["modal-variant-slide"],
          attributes: {
            type: "button",
            "data-index": k.toString(),
            "aria-label": `Select variant ${B.name || k + 1}`
          }
        });
        B.posterFileUrl ? fe.getAssetBlobUrl(B.posterFileUrl).then((G) => {
          F.style.backgroundImage = `url('${G}')`;
        }).catch((G) => {
          F.style.backgroundColor = "#ddd", F.textContent = "E";
        }) : (F.style.backgroundColor = "#eee", F.textContent = ((Y = B.name) == null ? void 0 : Y.substring(0, 1).toUpperCase()) || (k + 1).toString()), k === this.selectedModalVariantIndex && F.classList.add("selected"), F.addEventListener("click", () => {
          var Q, ne, he;
          if (this.selectedModalVariantIndex === k) return;
          this.selectedModalVariantIndex = k;
          const G = e[k];
          this.selectedModalSizeKey = ((he = (ne = (Q = G == null ? void 0 : G.sizes) == null ? void 0 : Q[0]) == null ? void 0 : ne.label) == null ? void 0 : he.toLowerCase()) || null, p.debug(
            `StepsModal: Variant selected in modal - Index: ${k}, New Size Key: ${this.selectedModalSizeKey}`
          ), typeof this.onModalVariantSelect == "function" && this.onModalVariantSelect(k, this.selectedModalSizeKey), this._renderVariantAndSizeSelectors(), this._updateFooterButton(this.steps[this.currentStepIndex]);
        }), I.appendChild(F);
      }), D.appendChild(I), this.stepSpecificContentContainer.appendChild(D);
    } else if (e.length === 1 && this.selectedModalVariantIndex !== 0) {
      this.selectedModalVariantIndex = 0;
      const D = e[0];
      this.selectedModalSizeKey = ((A = (E = (_ = D == null ? void 0 : D.sizes) == null ? void 0 : _[0]) == null ? void 0 : E.label) == null ? void 0 : A.toLowerCase()) || null;
    }
    const n = ((L = t == null ? void 0 : t.sizes) == null ? void 0 : L.filter(
      (D) => D.label && D.width && D.height
    )) || [];
    if (n.length > 0) {
      const D = V("div", {
        classList: ["modal-sizes-container"]
      }), X = V("h4", {
        textContent: "Select Size:",
        classList: ["modal-selector-title"]
      });
      n.length <= 1 && (X.style.display = "none"), D.appendChild(X);
      const I = V("div", {
        classList: ["modal-size-buttons"]
      });
      n.forEach((B) => {
        const k = B.label.toLowerCase(), F = V("button", {
          classList: ["modal-size-button"],
          attributes: {
            type: "button",
            "data-size-key": k,
            "aria-label": `Select size ${B.label}`
          }
        }), Y = V("span", {
          classList: ["size-label"],
          textContent: B.label
        }), G = V("span", {
          classList: ["size-description"],
          textContent: `(${B.width} x ${B.height}${B.depth ? ` x ${B.depth}` : ""})`
        });
        F.appendChild(Y), F.appendChild(G), k === this.selectedModalSizeKey && (F.classList.add("selected"), F.classList.add("active")), F.addEventListener("click", () => {
          this.selectedModalSizeKey !== k && (this.selectedModalSizeKey = k, typeof this.onModalVariantSelect == "function" && this.onModalVariantSelect(
            this.selectedModalVariantIndex,
            this.selectedModalSizeKey
          ), I.querySelectorAll(".modal-size-button").forEach((Q) => {
            const ne = Q.getAttribute("data-size-key") === k;
            Q.classList.toggle("active", ne), Q.classList.toggle("selected", ne);
          }), this._updateFooterButton(this.steps[this.currentStepIndex]));
        }), I.appendChild(F);
      }), D.appendChild(I), this.stepSpecificContentContainer.appendChild(D);
    } else
      this.selectedModalSizeKey = null, p.debug(
        `StepsModal: No sizes to display for variant index ${this.selectedModalVariantIndex}`
      );
    this._updateFooterButton(this.steps[this.currentStepIndex]);
  }
  _updateFooterButton(e) {
    if (!this.footerElement || !this.nextButtonElement || !this.modelData || !Array.isArray(this.modelData.options)) {
      p.error(
        "StepsModal._updateFooterButton: Critical elements or modelData.options missing."
      ), this.nextButtonElement && (this.nextButtonElement.disabled = !0);
      return;
    }
    if (this.footerElement.innerHTML = "", this.currentStepIndex === this.totalSteps - 1) {
      const t = V("button", {
        classList: ["ardisplay-view-wall-button", "ardisplay-multi-button"],
        attributes: { type: "button" }
      }), n = e.placement || "space";
      t.innerHTML = `
        <svg version="1.1" id="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 50 50">
          <g><path fill="none" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" d="M33,49H44c2.8,0,5-2.2,5-5V32.6 M1,33v11c0,2.8,2.2,5,5,5h11 M17,1H6C3.2,1,1,3.2,1,6v11 M49,16.6V6c0-2.8-2.2-5-5-5H33"/>
            <g><path d="M39,39c0,1.1-1.1,2-2.2,2L14.9,35c-1.1,0-1.8-0.9-1.8-2V17c0-1.1,0.7-2,1.8-2l22.1-6c1.1,0,2.2,0.9,2.2,2V39z M23.7,29.2c-0.6,0.6-0.6,1.5,0,2.1c0.3,0.3,0.7,0.4,1.1,0.4s0.8-0.1,1.1-0.4l4.4-4.4l4.2,4.2c0.6,0.6,1.5,0.6,2.1,0s0.6-1.5,0-2.1l-5.3-5.3c-0.6-0.6-1.5-0.6-2.1,0l-1.7,1.7l-3.8-3.8c-0.6-0.6-1.5-0.6-2.1,0l-6.9,6.9c-0.6,0.6-0.6,1.5,0,2.1c0.3,0.3,0.7,0.4,1.1,0.4s0.8-0.1,1.1-0.4l5.9-5.9l2.7,2.7L23.7,29.2z M29.1,19.6c0-1-0.8-1.8-1.8-1.8s-1.8,0.8-1.8,1.8s0.8,1.8,1.8,1.8S29.1,20.6,29.1,19.6"/></g>
          </g>
        </svg>
        <span>View on your ${n}</span>`, t.addEventListener("click", () => {
        const l = this.selectedModalVariantIndex !== -1 && this.modelData.options.length > this.selectedModalVariantIndex ? this.modelData.options[this.selectedModalVariantIndex] : null;
        let h = null;
        l && Array.isArray(l.sizes) && (this.selectedModalSizeKey ? h = l.sizes.find(
          (b) => b.label.toLowerCase() === this.selectedModalSizeKey
        ) : l.sizes.length === 1 && (h = l.sizes[0])), this.onPlaceObject(l, h);
      }), this.footerElement.appendChild(t), this.footerElement.appendChild(qe());
    } else {
      if (this.nextButtonElement.textContent = "Next", e.id === "selectVariantAndSize") {
        let t = !1;
        if (this.selectedModalVariantIndex !== -1 && this.modelData.options.length > this.selectedModalVariantIndex && // Check if index is valid
        this.modelData.options[this.selectedModalVariantIndex]) {
          const n = this.modelData.options[this.selectedModalVariantIndex];
          t = Array.isArray(n.sizes) && n.sizes.length > 1 ? !!this.selectedModalSizeKey : !0;
        } else (this.selectedModalVariantIndex === -1 && this.modelData.options.length === 0 || this.selectedModalVariantIndex !== -1 && this.modelData.options.length === 0) && (t = !0);
        this.nextButtonElement.disabled = !t;
      } else
        this.nextButtonElement.disabled = !1;
      this.footerElement.appendChild(this.nextButtonElement), this.footerElement.appendChild(qe());
    }
  }
  _updateStepIndicators() {
    if (this.headerElement) {
      this.headerElement.innerHTML = "";
      for (let e = 0; e < this.totalSteps; e++) {
        const t = V("div", {
          classList: ["ardisplay-step-indicator"]
        });
        e <= this.currentStepIndex && t.classList.add("active"), this.headerElement.appendChild(t);
      }
    }
  }
  _handleTouchStart(e) {
    e.touches.length === 1 && (this.touchStartX = e.touches[0].clientX);
  }
  _handleTouchEnd(e) {
    e.changedTouches.length === 1 && (this.touchEndX = e.changedTouches[0].clientX, this._handleSwipeGesture());
  }
  _handleSwipeGesture() {
    const e = this.touchEndX - this.touchStartX;
    Math.abs(e) > this.swipeThreshold && (e < 0 ? this._goToNextStep() : this._goToPreviousStep()), this.touchStartX = 0, this.touchEndX = 0;
  }
  show(e = "floor", t = null, n = null, l = null, h = 0, b = null) {
    var _, E;
    if (p.debug("StepsModal.show received:", {
      initialPlacement: e,
      posterUrlForReadyStep: t,
      customStepsDataExists: !!(n && n.length > 0),
      modelDataForVariantAndSizeStepExists: !!l,
      initialVariantIndex: h,
      initialSizeKey: b
    }), this.modelData = l, console.log(this.modelData), !this.modelData || typeof this.modelData != "object" || !Array.isArray(this.modelData.options)) {
      p.error(
        "StepsModal.show: Invalid or missing this.modelData (for variant/size selection) or this.modelData.options. Cannot show modal.",
        this.modelData
      );
      return;
    }
    if (this._prepareSteps(
      e,
      t,
      n,
      h,
      b
    ), this.currentStepIndex === -1 && this.steps.length === 0) {
      p.error(
        "StepsModal.show: Modal preparation failed (e.g., no valid steps derived). Not showing."
      );
      return;
    }
    this.modalElement.isConnected || Le(this.modalElement), this._updateStepContent(), this.modalElement.style.display = "flex", this.isVisible = !0, document.addEventListener("keydown", this.boundHandleKeydown), (E = (_ = this.footerElement) == null ? void 0 : _.querySelector("button")) == null || E.focus();
  }
  hide() {
    !this.modalElement || !this.isVisible || (this.modalElement.style.display = "none", this.isVisible = !1, document.removeEventListener("keydown", this.boundHandleKeydown), this.currentStepIndex = 0);
  }
  getElement() {
    return this.modalElement;
  }
}
const At = () => `
        <div class="ardisplay-progress-content">
            <h3 class="ardisplay-progress-text" data-translate-id="loading">Loading...</h3>
            <div class="ardisplay-progress-bar">
                <div class="ardisplay-progress-bar-fill" id="ardisplayProgressBarFill"></div>
            </div>
            <!-- Potential slot for an AR button if needed on completion inside modal -->
            <!-- <button class="ar-button ardisplay-hidden" id="activateAR">Activate AR</button> -->
        </div>
    `;
class Mt {
  constructor() {
    this.isVisible = !1, this.modalElement = null, this.progressBarFillElement = null, this.closeButtonElement = null, this.contentElement = null, this.isVisible = !1, this._createElement(), this._attachEventListeners();
  }
  _createElement() {
    var h;
    this.modalElement = V("div", {
      classList: ["ardisplay-progress-modal", "ardisplay-modal-overlay"],
      style: { display: "none" },
      attributes: {
        "aria-modal": "true",
        role: "dialog",
        "aria-labelledby": "progressModalTitle"
      }
    });
    const e = At(), t = document.createElement("template");
    t.innerHTML = e;
    const n = t.content.cloneNode(!0);
    this.contentElement = n.querySelector(
      ".ardisplay-progress-content"
    );
    const l = (h = this.contentElement) == null ? void 0 : h.querySelector(
      ".ardisplay-progress-text"
    );
    l && (l.id = "progressModalTitle"), this.progressBarFillElement = n.querySelector(
      "#ardisplayProgressBarFill"
    ), this.closeButtonElement = V("button", {
      classList: ["ardisplay-modal-close-button"],
      attributes: {
        type: "button",
        "aria-label": "Close Loading Indicator",
        style: "background:transparent"
      }
    }), this.closeButtonElement.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    `, this.modalElement.appendChild(this.closeButtonElement), this.modalElement.appendChild(n);
  }
  _attachEventListeners() {
    !this.modalElement || !this.closeButtonElement || !this.contentElement || (this.closeButtonElement.addEventListener("click", this.hide.bind(this)), this.modalElement.addEventListener("click", (e) => {
      e.target === this.modalElement && this.hide();
    }), this.boundHandleKeydown = this._handleKeydown.bind(this));
  }
  _handleKeydown(e) {
    e.key === "Escape" && this.hide();
  }
  /**
   * Shows the progress modal and resets the progress bar.
   * Appends to body if not already there.
   */
  show() {
    this.modalElement && (this.modalElement.isConnected || Le(this.modalElement), this.updateProgress(0), this.modalElement.style.display = "flex", this.isVisible = !0, document.addEventListener("keydown", this.boundHandleKeydown));
  }
  /**
   * Hides the progress modal.
   */
  hide() {
    this.modalElement && (this.modalElement.style.display = "none", this.isVisible = !1, document.removeEventListener("keydown", this.boundHandleKeydown));
  }
  /**
   * Updates the progress bar fill percentage.
   * @param {number} percentage - Progress value from 0 to 100.
   */
  updateProgress(e) {
    if (!this.progressBarFillElement) return;
    const t = Math.max(0, Math.min(100, e));
    this.progressBarFillElement.style.width = `${t}%`;
  }
  /**
   * Updates the text content within the modal.
   * @param {string} text - The text to display.
   */
  updateText(e) {
    if (!this.modalElement) return;
    const t = this.modalElement.querySelector(
      ".ardisplay-progress-text"
    );
    t && (t.textContent = e);
  }
  /**
   * Returns the main modal element.
   * @returns {HTMLElement | null}
   */
  getElement() {
    return this.modalElement;
  }
}
class zt {
  constructor() {
    this.modelViewerElement = null, this.isLoaded = !1, this.originalSize = null, this.currentScale = { x: 1, y: 1, z: 1 }, this.progressCallback = null, this.loadCallback = null, this.cameraChangeCallback = null, this._debouncedRenderDimensionLines = Pe(
      this._renderDimensionLines.bind(this)
    ), this._debouncedUpdateDimensionHotspots = Pe(
      this._updateDimensionHotspots.bind(this)
    ), this._handleLoad = this._handleLoad.bind(this), this._handleProgress = this._handleProgress.bind(this), this._boundHandleCameraChange = this._handleCameraChange.bind(this), this._boundHandleSceneGraphReady = this._handleSceneGraphReady.bind(this), this._boundHandleModelVisibility = this._handleModelVisibility.bind(this);
  }
  /**
   * Initializes the service with a specific model-viewer element and attaches listeners.
   * @param {HTMLElement} element - The <model-viewer> custom element.
   * @param {object} [callbacks={}] - Optional callbacks.
   * @param {Function} [callbacks.onProgress] - Called with progress percentage (0-100).
   * @param {Function} [callbacks.onLoad] - Called when the model is fully loaded.
   * @param {Function} [callbacks.onCameraChange] - Called when the camera view changes.
   */
  initialize(e, t = {}) {
    var n;
    if (!e || e.tagName !== "MODEL-VIEWER") {
      p.error(
        "ModelViewerService.initialize: Invalid model-viewer element provided."
      );
      return;
    }
    this.cleanup(), this.modelViewerElement = e, this.isLoaded = !1, this.originalSize = null, this.currentScale = { x: 1, y: 1, z: 1 }, this.progressCallback = t.onProgress, this.loadCallback = t.onLoad, this.cameraChangeCallback = t.onCameraChange, this.modelViewerElement.addEventListener("load", this._handleLoad), this.modelViewerElement.addEventListener("progress", this._handleProgress), this.modelViewerElement.addEventListener(
      "camera-change",
      this._boundHandleCameraChange
    ), this.modelViewerElement.addEventListener(
      "scene-graph-ready",
      this._boundHandleSceneGraphReady
    ), this.modelViewerElement.addEventListener(
      "model-visibility",
      this._boundHandleModelVisibility
    ), this.hideDefaultARButton(), e.addEventListener("progress", this._handleProgress), e.addEventListener("load", this._handleLoad), e.loaded && ((n = t.onProgress) == null || n.call(t, 100), this._handleLoad());
  }
  /**
   * Removes event listeners and resets state. Call when the component is destroyed.
   */
  cleanup() {
    this.modelViewerElement && (this.modelViewerElement.removeEventListener("load", this._handleLoad), this.modelViewerElement.removeEventListener(
      "progress",
      this._handleProgress
    ), this.modelViewerElement.removeEventListener(
      "camera-change",
      this._boundHandleCameraChange
    ), this.modelViewerElement.removeEventListener(
      "scene-graph-ready",
      this._boundHandleSceneGraphReady
    ), this.modelViewerElement.removeEventListener(
      "model-visibility",
      this._boundHandleModelVisibility
    ), p.debug(
      "ModelViewerService listeners removed from element:",
      this.modelViewerElement
    )), this.modelViewerElement = null, this.isLoaded = !1, this.originalSize = null, this.currentScale = { x: 1, y: 1, z: 1 }, this.progressCallback = null, this.loadCallback = null, this.cameraChangeCallback = null;
  }
  /**
   * @returns {boolean} Whether the model is currently loaded.
   */
  isModelLoaded() {
    return this.isLoaded;
  }
  /**
   * @returns {HTMLElement | null} The associated model-viewer element.
   */
  getElement() {
    return this.modelViewerElement;
  }
  _handleLoad() {
    this.isLoaded = !0, this.getOriginalDimensions(), this.setupDimensionsVisibility(!0), this.hideDefaultARButton(), this.loadCallback && this.loadCallback();
  }
  _handleProgress(e) {
    var t;
    if (((t = e.detail) == null ? void 0 : t.totalProgress) !== void 0 && this.progressCallback) {
      const n = Math.round(e.detail.totalProgress * 100);
      this.progressCallback(n);
    }
  }
  _handleCameraChange() {
    this._debouncedRenderDimensionLines(), this._debouncedUpdateDimensionHotspots(), this.cameraChangeCallback && this.cameraChangeCallback();
  }
  _handleSceneGraphReady() {
    this.modelViewerElement.loaded && this.getOriginalDimensions(), this.setupDimensionsVisibility(!0), this._debouncedRenderDimensionLines(), this._debouncedUpdateDimensionHotspots();
  }
  _handleModelVisibility(e) {
    p.debug(`ModelViewer: Visibility changed - ${e.detail.visible}`), this.setupDimensionsVisibility(e.detail.visible);
  }
  /**
   * Retrieves the model's dimensions from model-viewer and calculates its original (unscaled) size.
   * Stores the result in `this.originalSize`.
   */
  getOriginalDimensions() {
    var e;
    if (!(!this.modelViewerElement || typeof this.modelViewerElement.getDimensions != "function") && !this.originalSize)
      try {
        const t = this.modelViewerElement.getDimensions(), n = ((e = this.modelViewerElement.scale) == null ? void 0 : e.toString().split(" ").map(Number)) || [1, 1, 1], l = n[0] || 1, h = n[1] || 1, b = n[2] || 1;
        this.originalSize = {
          x: t.x / l,
          y: t.y / h,
          z: t.z / b
        }, p.debug(
          "Calculated original dimensions (meters):",
          this.originalSize
        );
      } catch (t) {
        p.error("Failed to get original dimensions:", t), this.originalSize = null;
      }
  }
  /**
   * Calculates the scale factors needed to resize the model to the desired dimensions.
   * @param {object} desiredSize - Object with { width, height, depth } as strings (e.g., "120cm").
   * @returns {object | null} Object with { scaleX, scaleY, scaleZ } or null if calculation fails.
   */
  calculateScale(e) {
    if (!this.originalSize || !this.originalSize.x || !this.originalSize.y || !this.originalSize.z) {
      if (this.getOriginalDimensions(), !this.originalSize || !this.originalSize.x || !this.originalSize.y || !this.originalSize.z)
        return p.error(
          "calculateScale: Failed to obtain valid original dimensions even after retry. Model loaded?",
          this.isLoaded,
          "Element exists?",
          !!this.modelViewerElement
        ), this.modelViewerElement && p.debug(
          "calculateScale: modelViewerElement.loaded:",
          this.modelViewerElement.loaded
        ), null;
      p.debug(
        "calculateScale: Successfully obtained original dimensions on retry:",
        this.originalSize
      );
    }
    if (!e || !e.width || !e.height)
      return p.error(
        "calculateScale: Invalid desiredSize object provided:",
        e
      ), null;
    try {
      const t = Be(e.width), n = Be(e.height), l = this.originalSize.z, h = e.depth ? Be(e.depth) : l > 1e-3 ? l : 0.05;
      if (this.originalSize.x === 0 || this.originalSize.y === 0 || this.originalSize.z === 0)
        return p.warn(
          "calculateScale: Original dimension is zero, cannot calculate scale accurately.",
          this.originalSize
        ), null;
      const b = t / this.originalSize.x, _ = n / this.originalSize.y, E = h / this.originalSize.z;
      return p.debug(
        `Calculated scale factors: x=${b}, y=${_}, z=${E} (Original: ${JSON.stringify(
          this.originalSize
        )}, Desired: ${t}x${n}x${h})`
      ), !isFinite(b) || !isFinite(_) || !isFinite(E) ? (p.error("calculateScale: Resulting scale factor is not finite.", {
        scaleX: b,
        scaleY: _,
        scaleZ: E
      }), null) : { scaleX: b, scaleY: _, scaleZ: E };
    } catch (t) {
      return p.error(
        `Error calculating model scale for desired size ${JSON.stringify(
          e
        )}:`,
        t
      ), null;
    }
  }
  /**
   * Applies the calculated scale factors to the model-viewer element.
   * @param {object} scaleFactors - Object with { scaleX, scaleY, scaleZ }.
   */
  applyScale(e) {
    if (!this.modelViewerElement || !e)
      return;
    const { scaleX: t, scaleY: n, scaleZ: l } = e;
    if (isNaN(t) || isNaN(n) || isNaN(l)) {
      p.error(
        "Cannot apply scale: Invalid scale factors (NaN).",
        e
      );
      return;
    }
    this.currentScale = { x: t, y: n, z: l };
    const h = `${t} ${n} ${l}`;
    this.modelViewerElement.setAttribute("scale", h), requestAnimationFrame(() => {
      this.setupDimensionsVisibility(!0), typeof this.modelViewerElement.updateFraming == "function" && this.modelViewerElement.updateFraming(), this._debouncedRenderDimensionLines(), this._debouncedUpdateDimensionHotspots(), this.modelViewerElement.dispatchEvent(
        new CustomEvent("ardisplay-scale-applied", {
          bubbles: !0,
          composed: !0
        })
      );
    });
  }
  /**
   * Updates the model source, poster, and AR placement.
   * @param {object} variantData - Data for the selected variant.
   * @param {string} variantData.url - The new model URL (glb/gltf).
   * @param {string} [variantData.iosUrl] - The new iOS model URL (usdz).
   * @param {string} [variantData.posterFileUrl] - The new poster image URL.
   * @param {string} [variantData.placement] - The new AR placement ('floor' or 'wall').
   */
  async setVariant(e) {
    !this.modelViewerElement || !e || !e.url || (this.modelViewerElement.setAttribute("src", e.url), e.posterFileUrl ? this.modelViewerElement.setAttribute("poster", e.posterFileUrl) : this.modelViewerElement.removeAttribute("poster"), e.placement && this.modelViewerElement.setAttribute(
      "ar-placement",
      e.placement
    ), this.isLoaded = !1, this.originalSize = null);
  }
  /**
   * Toggles the visibility of all dimension hotspots and lines.
   * @param {boolean} visible - Whether the dimensions should be visible.
   */
  setupDimensionsVisibility(e) {
    if (!this.modelViewerElement) return;
    [
      ...this.modelViewerElement.querySelectorAll(
        ".dim, .dot, #dimLines, .dimensionLine"
      )
    ].filter(Boolean).forEach((n) => {
      n.classList.toggle("ardisplay-hidden", !e);
    }), e && (this._debouncedRenderDimensionLines(), this._debouncedUpdateDimensionHotspots());
  }
  /**
   * Updates the position and text content of dimension hotspots based on current model size.
   * @private
   */
  _updateDimensionHotspots() {
    if (!(!this.modelViewerElement || !this.modelViewerElement.loaded || typeof this.modelViewerElement.getBoundingBoxCenter != "function" || typeof this.modelViewerElement.getDimensions != "function")) {
      if (this.modelViewerElement.arStatus !== "not-presenting") {
        this.setupDimensionsVisibility(!1);
        return;
      }
      try {
        const e = this.modelViewerElement.getBoundingBoxCenter(), t = this.modelViewerElement.getDimensions(), n = { x: t.x / 2, y: t.y / 2, z: t.z / 2 };
        [
          {
            name: "hotspot-dot+X-Y+Z",
            pos: [
              e.x + n.x,
              e.y - n.y,
              e.z + n.z
            ]
          },
          {
            name: "hotspot-dot+X-Y-Z",
            pos: [
              e.x + n.x,
              e.y - n.y,
              e.z - n.z
            ]
          },
          {
            name: "hotspot-dot+X+Y-Z",
            pos: [
              e.x + n.x,
              e.y + n.y,
              e.z - n.z
            ]
          },
          {
            name: "hotspot-dot-X+Y-Z",
            pos: [
              e.x - n.x,
              e.y + n.y,
              e.z - n.z
            ]
          },
          {
            name: "hotspot-dot-X-Y-Z",
            pos: [
              e.x - n.x,
              e.y - n.y,
              e.z - n.z
            ]
          },
          {
            name: "hotspot-dot-X-Y+Z",
            pos: [
              e.x - n.x,
              e.y - n.y,
              e.z + n.z
            ]
          },
          {
            name: "hotspot-dim+X-Y",
            pos: [
              e.x + n.x * 1.1,
              e.y - n.y * 1.1,
              e.z
            ],
            label: `${(t.z * 100).toFixed(0)} cm`,
            slot: '[slot="hotspot-dim+X-Y"]'
          },
          {
            name: "hotspot-dim+X-Z",
            pos: [
              e.x + n.x * 1.1,
              e.y,
              e.z - n.z * 1.1
            ],
            label: `${(t.y * 100).toFixed(0)} cm`,
            slot: '[slot="hotspot-dim+X-Z"]'
          },
          {
            name: "hotspot-dim+Y-Z",
            pos: [
              e.x,
              e.y + n.y * 1.1,
              e.z - n.z * 1.1
            ],
            label: `${(t.x * 100).toFixed(0)} cm`,
            slot: '[slot="hotspot-dim+Y-Z"]'
          },
          {
            name: "hotspot-dim-X-Z",
            pos: [
              e.x - n.x * 1.1,
              e.y,
              e.z - n.z * 1.1
            ],
            label: `${(t.y * 100).toFixed(0)} cm`,
            slot: '[slot="hotspot-dim-X-Z"]'
          },
          {
            name: "hotspot-dim-X-Y",
            pos: [
              e.x - n.x * 1.1,
              e.y - n.y * 1.1,
              e.z
            ],
            label: `${(t.z * 100).toFixed(0)} cm`,
            slot: '[slot="hotspot-dim-X-Y"]'
          }
        ].forEach(({ name: h, pos: b, label: _, slot: E }) => {
          if (!this.modelViewerElement) return;
          const A = b.join(" ");
          if (this.modelViewerElement.updateHotspot({
            name: h,
            position: A
          }), _ && E) {
            const L = this.modelViewerElement.querySelector(E);
            if (L) {
              const D = L.classList.contains("facing-camera");
              L.classList.toggle("ardisplay-hidden", !D), D && (L.textContent = _);
            } else
              p.warn(`Hotspot slot element not found: ${E}`);
          }
        });
      } catch (e) {
        p.error("Error updating dimension hotspots:", e);
      }
    }
  }
  /**
   * Renders the SVG lines connecting the dimension hotspots.
   * @private
   */
  _renderDimensionLines() {
    if (!this.modelViewerElement || !this.modelViewerElement.loaded)
      return;
    if (this.modelViewerElement.arStatus !== "not-presenting") {
      this.setupDimensionsVisibility(!1);
      return;
    }
    const e = this.modelViewerElement.querySelectorAll(
      "#dimLines > .dimensionLine"
    );
    if (e.length < 5)
      return;
    const t = [
      {
        line: e[0],
        start: "hotspot-dot+X-Y+Z",
        end: "hotspot-dot+X-Y-Z",
        dimHotspot: "hotspot-dim+X-Y"
      },
      {
        line: e[1],
        start: "hotspot-dot+X-Y-Z",
        end: "hotspot-dot+X+Y-Z",
        dimHotspot: "hotspot-dim+X-Z"
      },
      {
        line: e[2],
        start: "hotspot-dot+X+Y-Z",
        end: "hotspot-dot-X+Y-Z",
        dimHotspot: "hotspot-dim+Y-Z"
      },
      {
        line: e[3],
        start: "hotspot-dot-X+Y-Z",
        end: "hotspot-dot-X-Y-Z",
        dimHotspot: "hotspot-dim-X-Z"
      },
      {
        line: e[4],
        start: "hotspot-dot-X-Y-Z",
        end: "hotspot-dot-X-Y+Z",
        dimHotspot: "hotspot-dim-X-Y"
      }
    ];
    try {
      t.forEach(({ line: n, start: l, end: h, dimHotspot: b }) => {
        if (!this.modelViewerElement) return;
        const _ = this.modelViewerElement.queryHotspot(l), E = this.modelViewerElement.queryHotspot(h), A = b ? this.modelViewerElement.querySelector(`[slot="${b}"]`) : null;
        if (!n || !_ || !E) {
          n && n.classList.add("ardisplay-hidden");
          return;
        }
        const L = _.canvasPosition, D = E.canvasPosition;
        if (!L || !D) {
          n.classList.add("ardisplay-hidden");
          return;
        }
        n.setAttribute("x1", L.x), n.setAttribute("y1", L.y), n.setAttribute("x2", D.x), n.setAttribute("y2", D.y);
        const X = A ? !A.classList.contains("ardisplay-hidden") : !0;
        n.classList.toggle("ardisplay-hidden", !X);
      });
    } catch (n) {
      p.error("Error rendering dimension lines:", n);
    }
  }
  /**
   * Hides the default AR button slot provided by model-viewer.
   */
  hideDefaultARButton() {
    var e;
    if ((e = this.modelViewerElement) != null && e.shadowRoot) {
      const t = this.modelViewerElement.shadowRoot.querySelector(".slot.ar-button");
      t && t.style.display !== "none" && (t.style.display = "none");
    } else
      requestAnimationFrame(() => this.hideDefaultARButton());
  }
}
const te = new zt();
class Lt {
  constructor(e) {
    if (!e || !e.addToCartUrl) {
      p.error("CartButton: Missing modelData or addToCartUrl."), this.element = null;
      return;
    }
    this.modelData = e, this.element = this._createElement(), this._attachEventListeners();
  }
  _createElement() {
    const e = V("div", {
      classList: ["cart-button-wrapper"]
    }), t = V("button", {
      classList: ["cart-btn"],
      attributes: { type: "button" }
    });
    t.innerHTML = `
      <svg
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293
              2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0
              100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"
        />
      </svg>
    `;
    const n = V("span", { textContent: "Add to Cart" });
    return t.appendChild(n), e.appendChild(t), e;
  }
  _attachEventListeners() {
    this.element && this.element.addEventListener("click", this._handleCartClick.bind(this));
  }
  _handleCartClick() {
    var e;
    ve.sendStatsEvent(((e = this.modelData) == null ? void 0 : e.modelId) || "unknown", "Cart"), this.modelData.addToCartUrl && (window.location.href = this.modelData.addToCartUrl);
  }
  getElement() {
    return this.element;
  }
  show() {
    this.element && this.element.classList.remove("ardisplay-hidden");
  }
  hide() {
    this.element && this.element.classList.add("ardisplay-hidden");
  }
}
class kt {
  constructor(e) {
    this.onSizeSelect = e, this.currentSizes = null, this.currentVariantIndex = -1, this.selectedSizeKey = null, this.sizeButtons = {}, this.element = this._createElement();
  }
  _createElement() {
    const e = V("div", {
      classList: ["size-panel"]
    }), t = V("div", {
      classList: ["size-buttons-wrapper"]
    });
    return e.appendChild(t), e;
  }
  /**
   * Updates the panel with size options for a specific variant.
   * @param {object} variantSizes - Object mapping size keys to dimensions (e.g., { small: {width:'..'}, large:{...} }).
   * @param {number} variantIndex - The index of the variant these sizes belong to.
   * @param {string|null} [initialSizeKey=null] - Optionally pre-select a size.
   */
  updateSizes(e, t, n = null) {
    if (!this.element || !e || typeof e != "object")
      return;
    this.currentSizes = e, this.currentVariantIndex = t, this.sizeButtons = {};
    const l = this.element.querySelector(".size-buttons-wrapper");
    l.innerHTML = "";
    const h = Object.keys(e);
    if (h.length === 0) {
      l.textContent = "No size options available.", this.selectedSizeKey = null;
      return;
    }
    this.selectedSizeKey = n && e[n] ? n : h[0], h.forEach((b) => {
      const _ = e[b], E = V("button", {
        classList: ["size-button"],
        attributes: {
          type: "button",
          "data-size-key": b
        }
      }), A = V("span", {
        classList: ["size-label"],
        textContent: b.charAt(0).toUpperCase() + b.slice(1)
      }), L = V("span", {
        classList: ["size-description"],
        textContent: `(${_.width} x ${_.height}${_.depth ? ` x ${_.depth}` : ""})`
      });
      E.appendChild(A), E.appendChild(L), b === this.selectedSizeKey && E.classList.add("selected"), E.addEventListener("click", () => this._handleSizeClick(b)), l.appendChild(E), this.sizeButtons[b] = E;
    }), this.selectedSizeKey && typeof this.onSizeSelect == "function" && this.onSizeSelect(
      e[this.selectedSizeKey],
      this.selectedSizeKey,
      t
    );
  }
  _handleSizeClick(e) {
    !this.currentSizes || !this.currentSizes[e] || e === this.selectedSizeKey || (p.debug(
      `Size selected: ${e} for variant ${this.currentVariantIndex}`
    ), this.setSelectedSize(e), typeof this.onSizeSelect == "function" && this.onSizeSelect(
      this.currentSizes[e],
      e,
      this.currentVariantIndex
    ));
  }
  setSelectedSize(e) {
    !this.currentSizes || !this.currentSizes[e] || !this.sizeButtons[e] || (this.selectedSizeKey = e, Object.entries(this.sizeButtons).forEach(([t, n]) => {
      n.classList.toggle("selected", t === e);
    }));
  }
  getElement() {
    return this.element;
  }
}
class Vt {
  constructor(e, t = 0, n) {
    if (!e || !Array.isArray(e) || e.length === 0) {
      this.element = null;
      return;
    }
    this.variants = e, this.selectedIndex = t, this.onVariantSelect = n, this.slideElements = [], this.element = this._createElement(), this._populateSlides(), p.debug(`VariantSelector created with ${e.length} variants.`);
  }
  _createElement() {
    const e = V("div", { classList: ["slider"] }), t = V("div", { classList: ["slides"] });
    return e.appendChild(t), e;
  }
  _populateSlides() {
    if (!this.element) return;
    const e = this.element.querySelector(".slides");
    e.innerHTML = "", this.slideElements = [], this.variants.forEach((t, n) => {
      var h;
      const l = V("button", {
        classList: ["slide"],
        attributes: { type: "button", "data-index": n }
      });
      t.posterFileUrl ? l.style.backgroundImage = `url('${t.posterFileUrl}')` : (l.style.backgroundColor = "#eee", l.textContent = ((h = t.name) == null ? void 0 : h.substring(0, 3)) || n + 1), n === this.selectedIndex && l.classList.add("selected"), l.addEventListener(
        "click",
        () => this._handleSlideClick(n)
      ), e.appendChild(l), this.slideElements.push(l);
    });
  }
  _handleSlideClick(e) {
    e === this.selectedIndex || e < 0 || e >= this.variants.length || (this.setSelectedVariant(e), typeof this.onVariantSelect == "function" && this.onVariantSelect(this.variants[e], e));
  }
  setSelectedVariant(e) {
    if (e < 0 || e >= this.variants.length || !this.slideElements[e])
      return;
    this.selectedIndex = e, this.slideElements.forEach((n, l) => {
      n.classList.toggle("selected", l === e);
    });
    const t = this.slideElements[e];
    t && typeof t.scrollIntoView == "function" && t.scrollIntoView({
      behavior: "smooth",
      block: "nearest",
      inline: "center"
    });
  }
  getElement() {
    return this.element;
  }
  updateVariants(e, t = 0) {
    this.variants = e || [], this.selectedIndex = t, this._populateSlides();
  }
}
class It {
  constructor(e, t = {}) {
    this.modelData = e || {}, this.callbacks = {
      onSizeSelect: t.onSizeSelect || (() => {
      }),
      onVariantSelect: t.onVariantSelect || (() => {
      }),
      onShareClick: t.onShareClick || (() => {
      })
    }, this.sizePanelComponent = new kt(this.callbacks.onSizeSelect);
    const n = this.modelData.options || [], l = 0;
    this.variantSelectorComponent = new Vt(
      n,
      l,
      this._handleInternalVariantSelect.bind(this)
    ), this.element = null, this.sizePanelElement = null, this.variantPanelElement = null, this.sizeNavButton = null, this.variantNavButton = null, this.shareNavButton = null, this.activePanel = null, this.boundHandleOutsideClick = this._handleOutsideClick.bind(this), this._createElement(), this._attachEventListeners(), this.updateModelData(this.modelData, !0);
  }
  _createElement() {
    this.element = V("div", {
      classList: ["ardisplay-bottom-nav"]
    }), this.sizeNavButton = this._createNavButton("size", "Box", "Size"), this.variantNavButton = this._createNavButton(
      "variant",
      "Blocks",
      "Variant"
    ), this.shareNavButton = this._createNavButton("share", "Share2", "Share"), this.element.appendChild(this.sizeNavButton), this.element.appendChild(this.variantNavButton), this.element.appendChild(this.shareNavButton), we(this.element), this.sizePanelElement = this._createSubPanel(
      "size-selector-panel",
      "Select Size",
      this.sizePanelComponent.getElement()
    ), this.variantPanelElement = this._createSubPanel(
      "variant-selector-panel",
      "Select Variant",
      this.variantSelectorComponent.getElement()
    );
  }
  _createNavButton(e, t, n) {
    const l = V("button", {
      classList: ["ardisplay-nav-icon-button", `ardisplay-${e}-btn`],
      attributes: { type: "button", "data-action": e }
    }), h = V("span", {
      classList: ["ardisplay-nav-icon"],
      attributes: { "data-lucide": t }
    }), b = V("span", {
      classList: ["ardisplay-nav-label"],
      textContent: n
    });
    return l.appendChild(h), l.appendChild(b), requestAnimationFrame(() => {
      try {
        window.lucide && typeof window.lucide.createIcons == "function" && window.lucide.createIcons({ nodes: [l] });
      } catch (_) {
        p.error("Failed to process Lucide icon in nav button:", _);
      }
    }), l;
  }
  _createSubPanel(e, t, n) {
    const l = V("div", {
      classList: ["sub-panel", e, "ardisplay-hidden"]
    }), h = V("div", { classList: ["sub-panel-header"] }), b = V("span", {
      classList: ["sub-panel-title"],
      textContent: t
    }), _ = V("button", {
      classList: ["sub-panel-close-button"],
      attributes: { type: "button", "aria-label": `Close ${t} Panel` }
    }), E = V("span");
    E.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
      </svg>
    `, _.appendChild(E), requestAnimationFrame(() => {
      try {
        window.lucide && typeof window.lucide.createIcons == "function" && window.lucide.createIcons({ nodes: [_] });
      } catch (L) {
        p.error("Failed to process Lucide icon in close button:", L);
      }
    }), h.appendChild(b), h.appendChild(_);
    const A = V("div", {
      classList: ["sub-panel-content"]
    });
    return n && A.appendChild(n), l.appendChild(h), l.appendChild(A), l;
  }
  setActiveVariant(e) {
    this.variantSelectorComponent && this.variantSelectorComponent.setSelectedVariant(e);
  }
  _attachEventListeners() {
    var e, t, n, l;
    this.element && (this.element.addEventListener("click", this._handleNavClick.bind(this)), (t = (e = this.sizePanelElement) == null ? void 0 : e.querySelector(".sub-panel-close-button")) == null || t.addEventListener("click", (h) => {
      h.stopPropagation(), this._closePanel(this.sizePanelElement, this.sizeNavButton);
    }), (l = (n = this.variantPanelElement) == null ? void 0 : n.querySelector(".sub-panel-close-button")) == null || l.addEventListener("click", (h) => {
      h.stopPropagation(), this._closePanel(this.variantPanelElement, this.variantNavButton);
    }));
  }
  addOutsideClickListener() {
    document.addEventListener("mousedown", this.boundHandleOutsideClick, !0);
  }
  removeOutsideClickListener() {
    document.removeEventListener(
      "mousedown",
      this.boundHandleOutsideClick,
      !0
    );
  }
  _handleNavClick(e) {
    const t = e.target.closest(".ardisplay-nav-icon-button");
    if (!t) return;
    e.preventDefault();
    const n = t.dataset.action;
    switch (this.element.querySelectorAll(".ardisplay-nav-icon-button.active").forEach((l) => {
      l !== t && l.classList.remove("active");
    }), n) {
      case "size":
        this._togglePanel(this.sizePanelElement, t);
        break;
      case "variant":
        this._togglePanel(this.variantPanelElement, t);
        break;
      case "share":
        this._closeAllPanels(), this.callbacks.onShareClick(), t.classList.add("active"), setTimeout(() => t.classList.remove("active"), 300);
        break;
    }
  }
  _togglePanel(e, t) {
    if (!e || !t)
      return;
    !e.classList.contains("ardisplay-hidden") ? this._closePanel(e, t) : (this._closeAllPanels(), e.classList.remove("ardisplay-hidden"), t.classList.add("active"), this.activePanel = e, p.debug(`BottomNav: Opened panel - ${e.className}`));
  }
  _closePanel(e, t) {
    e && !e.classList.contains("ardisplay-hidden") && (e.classList.add("ardisplay-hidden"), t && t.classList.remove("active"), this.activePanel === e && (this.activePanel = null), p.debug(`BottomNav: Closed panel - ${e.className}`));
  }
  _closeAllPanels() {
    this._closePanel(this.sizePanelElement, this.sizeNavButton), this._closePanel(this.variantPanelElement, this.variantNavButton), this.activePanel = null;
  }
  _handleOutsideClick(e) {
    this.activePanel && this.element && !e.composedPath().includes(this.element) && !e.composedPath().includes(this.activePanel) && this._closeAllPanels();
  }
  _handleInternalVariantSelect(e, t) {
    if (p.debug(
      `BottomNav: Internal variant selection event - Index: ${t}, Name: ${(e == null ? void 0 : e.name) || "N/A"}`
    ), !this.sizePanelComponent) {
      p.error("BottomNav: SizePanel component instance is missing."), this.callbacks.onVariantSelect(e, t), this.updateNavButtonsVisibility();
      return;
    }
    const n = {};
    let l = null;
    e != null && e.sizes && Array.isArray(e.sizes) && e.sizes.forEach((h, b) => {
      if (h.label && h.width && h.height) {
        const _ = h.label.toLowerCase();
        n[_] = {
          width: h.width,
          height: h.height,
          depth: h.depth || "",
          label: h.label
        }, b === 0 && (l = _);
      }
    }), this.sizePanelComponent.updateSizes(n, t, l), this.updateNavButtonsVisibility(), this.callbacks.onVariantSelect(e, t);
  }
  getElement() {
    return this.element;
  }
  getPanelElements() {
    return {
      sizePanel: this.sizePanelElement,
      variantPanel: this.variantPanelElement
    };
  }
  updateNavButtonsVisibility() {
    var b, _, E, A;
    const e = ((b = this.modelData) == null ? void 0 : b.options) || [], t = ((_ = this.variantSelectorComponent) == null ? void 0 : _.selectedIndex) ?? 0, n = e[t], l = e.length, h = ((E = n == null ? void 0 : n.sizes) == null ? void 0 : E.filter((L) => L.label && L.width && L.height).length) ?? 0;
    if (this.variantNavButton) {
      const L = l <= 1;
      this.variantNavButton.classList.toggle(
        "ardisplay-hidden",
        L
      ), L && this._closePanel(this.variantPanelElement, this.variantNavButton);
    }
    if (this.sizeNavButton) {
      const L = h <= 1;
      this.sizeNavButton.classList.toggle("ardisplay-hidden", L), L && this._closePanel(this.sizePanelElement, this.sizeNavButton);
    }
    if (this.shareNavButton) {
      const L = ((A = this.modelData) == null ? void 0 : A.displayShareBtn) === !1;
      this.shareNavButton.classList.toggle("ardisplay-hidden", L);
    }
  }
  /**
   * Centralized method to update the BottomNav with new model data.
   * @param {object} newModelData - The full model data.
   * @param {boolean} isInitialSetup - Flag to indicate if this is the first setup.
   */
  updateModelData(e, t = !1) {
    var E;
    this.modelData = e || {};
    const n = this.modelData.options || [];
    let l = ((E = this.variantSelectorComponent) == null ? void 0 : E.selectedIndex) ?? 0;
    t || (p.debug(
      `BottomNav updateModelData (external update): Refreshing VariantSelector with ${n.length} variants, selecting index 0.`
    ), l = 0, this.variantSelectorComponent.updateVariants(n, l));
    const h = n[l], b = {};
    let _ = null;
    h != null && h.sizes && Array.isArray(h.sizes) && h.sizes.forEach((A, L) => {
      if (A.label && A.width && A.height) {
        const D = A.label.toLowerCase();
        b[D] = {
          width: A.width,
          height: A.height,
          depth: A.depth || "",
          label: A.label
        }, L === 0 && (_ = D);
      }
    }), this.sizePanelComponent.updateSizes(
      b,
      l,
      _
    ), this.updateNavButtonsVisibility();
  }
}
const Bt = '*,*:before,*:after{box-sizing:border-box;margin:0;padding:0}model-viewer{display:block;width:100%;height:100%;--min-hotspot-opacity: 0;position:relative}.cart-button-wrapper{display:none}model-viewer[ar-status=session-started] .cart-button-wrapper,model-viewer[ar-status=object-placed] .cart-button-wrapper{display:flex}model-viewer[ar-status=session-started] .ardisplay-qr-code-button,model-viewer[ar-status=object-placed] .ardisplay-qr-code-button{display:none}.bottom-container{position:absolute;width:100%;bottom:0;left:0;height:auto;display:flex;flex-direction:column;align-items:center;z-index:10;pointer-events:none;direction:ltr}.cart-button-wrapper{position:absolute;bottom:64px;left:0;right:0;justify-content:center;margin-bottom:12px;pointer-events:auto}.cart-btn{all:unset;box-sizing:border-box;background-color:#2563eb;color:#fff;border-radius:9999px;padding:10px 28px;font-weight:600;font-family:sans-serif;display:inline-flex;align-items:center;gap:8px;box-shadow:0 4px 10px #00000026;cursor:pointer;transition:background-color .2s ease,transform .1s ease}.cart-btn:hover{background-color:#1d4ed8}.cart-btn:active{transform:scale(.98)}.cart-btn svg{height:20px;width:20px;stroke-width:2}.ardisplay-bottom-nav{position:absolute;bottom:0;width:100%;height:56px;display:flex;align-items:center;justify-content:center;gap:8px;z-index:100;background-color:#ffffffd9;backdrop-filter:blur(10px);-webkit-backdrop-filter:blur(10px);box-shadow:0 2px 8px #0000001a;pointer-events:auto;overflow:hidden;padding:0 8px}.ardisplay-nav-icon-button{all:unset;box-sizing:border-box;display:flex;flex-direction:column;align-items:center;justify-content:center;flex:1;min-width:60px;height:100%;padding:4px 6px;color:#333;background:transparent;border-radius:8px;cursor:pointer;transition:background-color .2s ease,color .2s ease;text-align:center;font-family:sans-serif}.ardisplay-nav-icon-button:hover{background-color:#0000000d}.ardisplay-nav-icon-button.active{background-color:#00000014}.ardisplay-nav-icon-button.ardisplay-hidden{display:none}.ardisplay-nav-icon-button svg{height:24px;width:24px;margin-bottom:2px;stroke-width:1.5;color:#555;pointer-events:none}.ardisplay-nav-icon-button.active svg{color:#007aff}.ardisplay-nav-icon-button span:not([data-lucide]){font-size:10px;font-weight:500;line-height:1.2;pointer-events:none}.sub-panel{position:absolute;bottom:0;left:0;width:100%;height:auto;max-height:40vh;z-index:1000;background-color:#fffffff2;backdrop-filter:blur(15px);-webkit-backdrop-filter:blur(15px);box-shadow:0 -4px 15px #0000001a;display:flex;flex-direction:column;overflow:hidden;transition:transform .3s ease-out,opacity .3s ease-out;transform:translateY(100%);opacity:0;pointer-events:none}.sub-panel:not(.ardisplay-hidden){transform:translateY(0);opacity:1;pointer-events:auto}.sub-panel-header{display:flex;align-items:center;justify-content:center;padding:0 16px;height:48px;flex-shrink:0;border-bottom:1px solid rgba(0,0,0,.1);position:relative}.sub-panel-title{font-size:16px;font-weight:600;color:#333;font-family:sans-serif}.sub-panel .sub-panel-close-button{position:absolute;top:0;right:0;width:48px;height:48px;color:#888;background-color:transparent;border-radius:0;outline:none;border:none;font-size:28px}.sub-panel .sub-panel-close-button:hover{color:#333;background-color:#0000000d}.sub-panel-content{padding:16px;flex-grow:1;overflow-y:auto;-webkit-overflow-scrolling:touch}.variant-selector-panel .slider{width:100%;text-align:center;overflow-x:auto;overflow-y:hidden;padding-bottom:10px;-webkit-overflow-scrolling:touch;scrollbar-width:none}.variant-selector-panel .slider::-webkit-scrollbar{display:none}.variant-selector-panel .slides{display:inline-flex;justify-content:flex-start;align-items:center;padding:4px 0;gap:12px;white-space:nowrap}.variant-selector-panel .slide{all:unset;box-sizing:border-box;flex-shrink:0;width:64px;height:64px;background-color:#fff;border:1.5px solid #ccc;border-radius:12px;cursor:pointer;background-position:center;background-size:cover;background-repeat:no-repeat;outline:none;transition:border-color .2s ease,box-shadow .2s ease,transform .1s ease;box-shadow:0 1px 3px #0000001a;position:relative}.variant-selector-panel .slide.selected{border-color:#007aff;box-shadow:0 0 0 2.5px #007aff66}.variant-selector-panel .slide:active{transform:scale(.97)}.variant-selector-panel .slide.selected:after{content:"✔";position:absolute;bottom:2px;right:4px;font-size:12px;color:#fff;background-color:#007aff;border-radius:50%;width:16px;height:16px;display:flex;align-items:center;justify-content:center;line-height:1}.size-selector-panel .size-panel{display:flex;flex-direction:column;gap:10px}.size-selector-panel .size-button{all:unset;box-sizing:border-box;border:1.5px solid #ccc;border-radius:10px;padding:10px 16px;background-color:#ffffffe6;font-weight:500;font-size:14px;font-family:sans-serif;color:#333;cursor:pointer;display:flex;justify-content:space-between;align-items:center;width:100%;transition:border-color .2s ease,color .2s ease,background-color .2s ease,transform .1s ease;text-align:left}.size-selector-panel .size-button:hover:not(.selected){border-color:#aaa;background-color:#f8f8f8}.size-selector-panel .size-button.selected{color:#007aff;border-color:#007aff;background-color:#007aff0d;font-weight:600}.size-selector-panel .size-button:active{transform:scale(.99)}.size-selector-panel .size-label{pointer-events:none}.size-selector-panel .size-description{font-size:12px;color:#666;margin-left:8px;pointer-events:none}.size-selector-panel .size-button.selected .size-description{color:#007aff}.ardisplay-hidden{display:none}model-viewer[ar-status=session-started] .ardisplay-nav-icon-button:last-child,model-viewer[ar-status=object-placed] .ardisplay-nav-icon-button:last-child{display:flex}.ardisplay-viewer-hidden-wrapper{top:0;left:0;opacity:0;z-index:-100;position:absolute}.ardisplay-viewer-hidden-wrapper model-viewer[ar-status=session-started],.ardisplay-viewer-hidden-wrapper model-viewer[ar-status=object-placed]{display:block}', $t = ".ardisplay-qr-code-button{all:unset;background:#fff;cursor:pointer;padding:10px;display:flex;align-items:center;justify-content:center;gap:10px;box-sizing:border-box}.ardisplay-full-width{width:100%}model-viewer{z-index:-100}", Dt = (S, e = !1) => {
  const t = (S == null ? void 0 : S.arBtn) || {}, n = ["ardisplay-qr-code-button"];
  e && n.push("ardisplay-full-width");
  const l = t.btnIcon ? `<span data-lucide="${t.btnIcon}" class="ardisplay-button-icon"></span>` : "", h = t.btnText || "View in your space", b = $e(S, !1);
  return `
        <div class="ardisplay-button-mode-container" style="direction: ltr;">
            ${`<style>${$t}</style>`}
            <button class="${n.join(" ")}" type="button">
                ${l}
                <span class="ardisplay-button-text">${h}</span>
            </button>
            <div>
                ${b}
            </div>
        </div>
    `;
}, Rt = ".ardisplay-view-3d-button{bottom:10px;right:10px;padding:10px 20px;background-color:#000000bf;color:#fff;border:none;border-radius:50px;cursor:pointer;display:flex;flex-direction:row;align-items:center;justify-content:center;gap:10px}.ardisplay-full-width{width:100%}", Pt = (S, e = !1) => {
  const t = (S == null ? void 0 : S.arBtn) || {}, n = ["ardisplay-view-3d-button"];
  e && n.push("ardisplay-full-width");
  const l = t.btnIcon ? `<span data-lucide="${t.btnIcon}" class="ardisplay-button-icon"></span>` : "", h = t.modalButtonText || "View in 3D";
  return `
        <div class="ardisplay-popup-trigger-container" style="direction: ltr;">
            ${`<style>${Rt}</style>`}
            <button class="${n.join(" ")}" type="button">
                ${l}
                <span class="ardisplay-button-text">${h}</span>
            </button>
        </div>
    `;
};
class Ot extends HTMLElement {
  static get observedAttributes() {
    return ["ar-btn-config", "src", "shopify-src", "enabled"];
  }
  constructor() {
    super(), this.attachShadow({ mode: "open" }), this.modelData = null, this.selectedVariantIndex = 0, this.selectedSizeKey = null, this.isInitialized = !1, this.isModelLoaded = !1, this.userClickedAR = !1, this.bottomNav = null, this.cartButton = null, this.progressModal = new Mt(), this.qrModal = new gt(), this.stepsModal = new Et(
      this._handleActivateAR.bind(this),
      this._handleVariantSizeSelectionConfirmed.bind(this)
    ), this.modelViewerElement = null, this.arTriggerButton = null, this._boundHandleArButtonClick = null;
  }
  connectedCallback() {
    this.isInitialized || (this._initializeComponent(), this.isInitialized = !0);
  }
  _getAttributes() {
    return {
      src: this.getAttribute("src"),
      shopifySrc: this.getAttribute("shopify-src"),
      useUrl: !this.hasAttribute("src") && !this.hasAttribute("shopify-src")
    };
  }
  _loadBaseStyles() {
    var h;
    this.shadowRoot.querySelectorAll("style").forEach((b) => b.remove());
    const t = ((h = this.modelData) == null ? void 0 : h.mode) || "popup";
    try {
      const b = V("style", { textContent: Bt });
      t === "popup" ? document.body.appendChild(b) : this.shadowRoot.appendChild(b);
    } catch (b) {
      p.error("ARDisplayViewer: Failed to load base styles.", b);
    }
    const n = V("style"), l = this.hasAttribute("fullWidth");
    t === "inpage" ? n.textContent = ":host { display: block; width: 100%; height: 600px; font-family: sans-serif; position: relative; }" : l ? n.textContent = ":host { display: block; width: 100%; height: auto; font-family: sans-serif; }" : n.textContent = ":host { display: inline-block; width: auto; height: auto; font-family: sans-serif; }", t === "popup" ? document.body.appendChild(n) : this.shadowRoot.appendChild(n);
  }
  async _handleActivateAR(e, t) {
    if (!this.modelViewerElement || !te.isModelLoaded()) {
      this._showQrModal(), this.userClickedAR = !1, this.stepsModal.hide();
      return;
    }
    const n = e || this.modelData.options[this.selectedVariantIndex];
    let l = t;
    if (!l && n && Array.isArray(n.sizes) && n.sizes.length > 0 && (l = n.sizes[0]), p.debug("AR Activation - Final Variant to use:", n == null ? void 0 : n.name), p.debug("AR Activation - Final Size to use:", l == null ? void 0 : l.label), l && l.width && l.height) {
      const h = te.calculateScale({
        width: l.width,
        height: l.height,
        depth: l.depth || ""
      });
      h && te.applyScale(h);
    }
    if (typeof this.modelViewerElement.activateAR == "function") {
      const h = this.modelData.modelId;
      ve.sendStatsEvent(h, "Try");
      try {
        await this.modelViewerElement.activateAR();
      } catch (b) {
        alert("AR Activation failed:", b);
      }
    } else
      ve.sendStatsEvent(
        modelId,
        "Failed",
        error.message || "Activation error"
      );
    this.stepsModal.hide(), this.userClickedAR = !1;
  }
  async _initializeComponent() {
    var e;
    try {
      const t = this._getAttributes();
      p.debug("Fetching model data with attributes:", t), this.modelData = await Ye.getModelData(t), this.hasAttribute("data-loading") && (this.removeAttribute("data-loading"), p.debug(
        `ARDisplayViewer: Mode '${this.modelData.mode}' initialized, trigger button ready. Removed data-loading attribute from host.`
      )), this._loadBaseStyles();
      const n = ((e = this.modelData) == null ? void 0 : e.enabled) === !1, l = this.hasAttribute("enabled");
      if (!this.modelData) {
        p.warn(
          "ARDisplayViewer: No model data found. Aborting initialization."
        ), this.shadowRoot.innerHTML = "<!-- ARDisplayViewer disabled: No model data -->";
        return;
      }
      if (n && !l) {
        p.warn(
          "ARDisplayViewer: Component disabled via fetched data and no 'enabled' attribute override. Aborting initialization."
        ), this.shadowRoot.innerHTML = "<!-- ARDisplayViewer disabled -->";
        return;
      } else if (n && l)
        p.debug(
          "ARDisplayViewer: Data indicates disabled, but 'enabled' attribute is present. Proceeding."
        );
      else if (!this.modelData.enabled && !l) {
        p.warn(
          "ARDisplayViewer: Component disabled (enabled property missing or false in data). Aborting initialization."
        ), this.shadowRoot.innerHTML = "<!-- ARDisplayViewer disabled -->";
        return;
      }
      this.hasAttribute("ar-button") && (p.debug(
        "ARDisplayViewer: 'ar-button' attribute found, setting mode to 'none'."
      ), this.modelData.mode = "none"), this.hasAttribute("ar-normal") && (p.debug(
        "ARDisplayViewer: 'ar-normal' attribute found, setting mode to 'normal'."
      ), this.modelData.mode = "inpage", await Ae()), this.hasAttribute("ar-popup") && (p.debug(
        "ARDisplayViewer: 'ar-popup' attribute found, setting mode to 'popup'."
      ), this.modelData.mode = "popup"), p.debug(
        "Model data loaded and component enabled. Proceeding with rendering."
      );
    } catch (t) {
      p.error(
        "ARDisplayViewer: Failed during model data initialization.",
        t
      ), this.shadowRoot.innerHTML = "<!-- ARDisplayViewer Error: Failed to load data -->";
      return;
    }
    await this._renderBaseTemplate(), this.modelViewerElement && te.initialize(this.modelViewerElement, {
      onProgress: this._handleModelProgress.bind(this),
      onLoad: this._handleModelLoad.bind(this)
    }), this._updateArBtnConfig(this.getAttribute("ar-btn-config")), this._initializeUIComponents(), this._setupTriggerListeners();
  }
  _updateArBtnConfig(e) {
    if (!this.modelData || !this.arTriggerButton)
      return;
    let t = { ...this.modelData.arBtn };
    if (e)
      try {
        const _ = Qe(e), E = JSON.parse(_);
        t = { ...t, ...E }, p.debug(
          "Applying custom AR button config from attribute:",
          t
        );
      } catch (_) {
        p.error(
          "Invalid AR button configuration provided in ar-btn-config attribute:",
          _
        );
      }
    const n = this.arTriggerButton;
    n.style.backgroundColor = t.btnBgColor || "", n.style.color = t.btnTextColor || "", n.style.borderRadius = t.cornerRadius ? `${t.cornerRadius}px` : "", n.style.fontSize = t.btnSize ? `${t.btnSize - 6}px` : "", n.style.boxSizing = "border-box";
    const l = n.querySelector(".ardisplay-button-icon"), h = n.querySelector(".ardisplay-button-text");
    let b = "";
    if (this.modelData.mode === "popup" ? b = t.modalButtonText || "View in 3D" : b = t.btnText || "View in your space", l && (t.btnIcon ? (l.setAttribute("data-lucide", t.btnIcon), l.style.width = "24px", l.style.height = "24px", we(n)) : (l.innerHTML = "", l.removeAttribute("data-lucide"))), h ? h.textContent = b : n.textContent = b, this.modelData.mode === "popup") {
      const _ = this.shadowRoot.querySelector(
        ".ardisplay-view-3d-button"
      );
      _ && _ === n && h && t.modalButtonText && (h.textContent = t.modalButtonText);
    }
  }
  _setupInpageOverlay() {
    var t, n;
    if (!this.modelViewerElement) return;
    const e = (n = (t = this.modelData.options) == null ? void 0 : t[0]) == null ? void 0 : n.posterFileUrl;
    e && (this.hasAttribute("ar-normal") || fe.getAssetBlobUrl(e).then((l) => {
      if (!this.modelViewerElement) return;
      const h = V("img", {
        classList: ["ardisplay-inpage-poster-overlay"],
        attributes: { src: l, alt: "Product Preview" },
        style: {
          position: "absolute",
          top: "0",
          left: "0",
          width: "100%",
          height: "100%",
          objectFit: "contain",
          // Or 'cover'
          backgroundColor: "white",
          // Optional bg
          zIndex: "10",
          // Above model-viewer, below UI
          cursor: "pointer"
          // Indicate clickable
        }
      }), b = async () => {
        if (h.parentNode === this.modelViewerElement) {
          this.modelViewerElement.removeChild(h);
          try {
            await Ae(), this.modelViewerElement && p.debug(
              "Inpage overlay removed, model-viewer loading ensured."
            );
          } catch (_) {
            p.error(
              "Failed to lazy-load model-viewer after overlay removal:",
              _
            );
          }
        }
      };
      h.addEventListener("click", b, { once: !0 }), this.modelViewerElement.appendChild(h);
    }).catch((l) => {
      p.error("Failed to get poster for inpage overlay:", l);
    }));
  }
  _setupTriggerListeners() {
    if (!this.arTriggerButton) return;
    switch (this.modelData.mode) {
      case "inpage":
        this.arTriggerButton.addEventListener(
          "click",
          this._handleArButtonClick.bind(this)
        ), this._setupInpageOverlay();
        break;
      case "popup":
        this.arTriggerButton.addEventListener(
          "click",
          this._handlePopupTriggerClick.bind(this)
        );
        break;
      case "none":
        this.arTriggerButton.addEventListener(
          "click",
          this._handleArButtonClick.bind(this)
        );
        break;
    }
  }
  _createPopupViewerStructure() {
    var G;
    const e = V("div", {
      classList: ["model-viewer-popup-container"],
      // Add specific class
      style: { display: "none" }
      // Start hidden
    }), t = V("div", {
      classList: ["ardisplay-model-viewer-overlay"]
      // Reuse overlay class
    }), n = V("div", {
      classList: ["model-viewer-wrapper"]
      // Wrapper for viewer and details panel
      // Apply styles similar to original .model-viewer-container
    }), l = $e(this.modelData, !0);
    n.innerHTML = l;
    const h = n.querySelector("model-viewer");
    h || p.error(
      "Failed to create model-viewer element within popup structure!"
    );
    const b = ((G = this.modelData) == null ? void 0 : G.arBtn) || {}, E = V("button", {
      classList: ["ardisplay-popup-ar-button"],
      attributes: { type: "button" }
      // Assign to the slot
    }), A = b.btnIcon ? `<span data-lucide="${b.btnIcon}" class="ardisplay-button-icon"></span>` : "", D = `<span class="ardisplay-button-text">${b.btnText || "View in your space"}</span>`;
    E.innerHTML = A + D, E.style.backgroundColor = b.btnBgColor || "", E.style.color = b.btnTextColor || "", E.style.borderRadius = b.cornerRadius ? `${b.cornerRadius}px` : "", E.style.fontSize = b.btnSize ? `${b.btnSize - 6}px` : "", E.style.boxSizing = "border-box", we(E), h.appendChild(E), E.addEventListener(
      "click",
      this._handleArButtonClick.bind(this)
    );
    const X = V("button", {
      classList: ["ardisplay-modal-close-button", "popup-viewer-close-button"],
      attributes: { type: "button", "aria-label": "Close 3D Viewer" }
    });
    X.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
      </svg>
    `;
    const I = V("div", {
      classList: ["ardisplay-details-panel"],
      style: {
        display: "flex",
        paddingInline: "16px"
      }
      // Show only if slotted content exists
    }), B = V("div", {
      classList: ["ar-display-custom-panel"]
    }), k = this.querySelector('[slot="custom-panel"]');
    k && B.appendChild(k.cloneNode(!0)), I.appendChild(B);
    const F = V("button", {
      classList: ["ardisplay-show-qr-button"],
      // Class for styling
      attributes: { type: "button" },
      // Copied styles from original for quick setup, ideally move to CSS
      style: {
        marginTop: "16px",
        marginRight: "16px",
        padding: "8px 16px",
        color: "black",
        border: "1px solid black",
        borderRadius: "4px",
        cursor: "pointer",
        display: "flex",
        flexDirection: "row",
        alignItems: "center",
        gap: "10px",
        fontWeight: "600",
        backgroundColor: "white",
        alignSelf: "flex-start",
        // Align button left
        width: "100%"
      }
    });
    F.innerHTML = `
      <svg viewBox="0 0 24 24" focusable="false" width="24" height="24" aria-hidden="true" fill="currentColor"><path d="M2 2h7v2H4v5H2V2zm18 2h-5V2h7v7h-2V4zM4 15H2v7h7v-2H4v-5zm18 0h-2v5h-5v2h7v-7z"></path><path d="M11 6h2v5h5v7h-7v-5H6v-2h5V6z"></path><path d="M9 6H6v3h3V6zm6 0h3v3h-3V6zm-6 9H6v3h3v-3z"></path></svg>
      <span>Try it in your home</span>
  `;
    const Y = V("div", {
      classList: ["ardisplay-inline-qr-container"],
      // Class for styling
      style: {
        display: "none",
        // Start hidden
        marginTop: "16px",
        justifyContent: "center",
        alignItems: "center",
        width: "100%"
        // Take full width of details panel
      }
    });
    return I.appendChild(F), I.appendChild(Y), F.addEventListener("click", async () => {
      const Q = document.querySelector(
        ".ardisplay-inline-qr-container"
      );
      if (!Q) return;
      const ne = Q.style.display === "none";
      if (Q.style.display = ne ? "flex" : "none", ne && !Q.querySelector("canvas") && !Q.querySelector("img"))
        if (this.modelData && this.modelData.qrCode && this.modelData.modelId) {
          const he = Oe.getARFailureFallbackUrl(
            this.modelData.modelId
          );
          if (he)
            try {
              Q.innerHTML = '<div class="qr-code-placeholder">Loading QR...</div>', await Te.generateAndAppend(
                Q,
                he,
                this.modelData.qrCode
              );
            } catch (ue) {
              p.error("Failed to generate inline QR code:", ue), Q.innerHTML = '<p class="ardisplay-error">QR Error</p>';
            }
          else
            p.error("Could not generate inline QR: Missing data URL."), Q.innerHTML = '<p class="ardisplay-error">QR URL Error</p>';
        } else
          p.error(
            "Could not generate inline QR: Missing modelData or QR config."
          ), Q.innerHTML = '<p class="ardisplay-error">QR Config Error</p>';
    }), n.appendChild(X), h && n.appendChild(I), e.appendChild(t), e.appendChild(n), X.addEventListener("click", () => {
      e.style.display = "none", t.style.display = "none", this.userClickedAR = !1;
    }), t.addEventListener("click", () => {
      e.style.display = "none", t.style.display = "none", this.userClickedAR = !1;
    }), e;
  }
  _handlePopupTriggerClick() {
    Ae().then(() => {
      let e = document.getElementById(
        "ardisplay-popup-viewer-container"
      );
      e || (e = this._createPopupViewerStructure(), Le(e));
      const t = e.querySelector("model-viewer");
      if (!t) {
        p.error("Failed to find model-viewer in popup structure!"), this.userClickedAR = !1;
        return;
      }
      te.getElement() !== t ? (te.initialize(t, {
        onProgress: this._handleModelProgress.bind(this),
        onLoad: this._handleModelLoad.bind(this)
        // Ensure load callback is attached
      }), this.modelViewerElement = t) : this.modelViewerElement = t, this._initializeUIComponents(!0), e.style.display = "flex";
      const n = e.querySelector(
        ".ardisplay-model-viewer-overlay"
      );
      n && (n.style.display = "block"), this.bottomNav && this.bottomNav.updateModelData(this.modelData);
    }).catch((e) => {
      p.error("ARDisplayViewer: Failed to setup popup viewer.", e), alert("Failed to load 3D Viewer: " + e.message), this.userClickedAR = !1;
    });
  }
  _appendPopupUIComponents() {
    const e = document.querySelector(
      ".model-viewer-popup-container model-viewer"
    );
    if (e) {
      if (this.cartButton) {
        const t = this.cartButton.getElement();
        t && !t.isConnected && e.appendChild(t);
      }
      if (this.bottomNav) {
        const t = this.bottomNav.getElement(), n = this.bottomNav.getPanelElements();
        n.sizePanel && !n.sizePanel.isConnected && e.appendChild(n.sizePanel), n.variantPanel && !n.variantPanel.isConnected && e.appendChild(n.variantPanel), t && !t.isConnected && (e.appendChild(t), this.bottomNav.addOutsideClickListener()), we(t);
      }
    }
  }
  /**
   * Triggered when the user presses any “View in AR / 3-D” button.
   * Handles: desktop fallback, progress UI, model-viewer set-up,
   * proactive AR-capability test and finally hands over to the
   * Steps-modal / direct AR activation.
   */
  async _handleArButtonClick() {
    if (!this._arLaunching) {
      this._arLaunching = !0, this.userClickedAR = !0;
      try {
        if (!He()) {
          p.debug("Desktop device detected – showing QR fallback."), this._showQrModal();
          return;
        }
        if (this.progressModal.show(), await Ae(), !this.modelViewerElement && (this.modelViewerElement = this.shadowRoot.querySelector("model-viewer"), !this.modelViewerElement))
          throw new Error("model-viewer element not found.");
        te.getElement() !== this.modelViewerElement && (p.debug("Re-initialising ModelViewerService for current element."), te.initialize(this.modelViewerElement, {
          onProgress: this._handleModelProgress.bind(this),
          onLoad: this._handleModelLoad.bind(this)
        })), te.isModelLoaded() && (p.debug("Model already loaded – proceeding to Steps / AR."), this.progressModal.hide(), await this._showStepsOrActivateAR());
      } catch (e) {
        p.error("Error while preparing AR flow:", e), this.progressModal.hide(), this._showQrModal(), this.userClickedAR = !1;
      } finally {
        this._arLaunching = !1;
      }
    }
  }
  _handleModelProgress(e) {
    this.userClickedAR && !this.isModelLoaded && (this.progressModal.isVisible, this.progressModal.updateProgress(e));
  }
  _handleModelLoad() {
    this.isModelLoaded = !0, p.debug(
      `Model loaded for variant ${this.selectedVariantIndex}. Applying initial size.`
    ), this._applyInitialSize(), this.userClickedAR ? (this.progressModal.hide(), this._showStepsOrActivateAR()) : this.progressModal.hide();
  }
  // Add/Replace this method in ARDisplayViewer.js
  _handleVariantSizeSelectionConfirmed(e, t) {
    var L, D, X, I;
    const n = this.selectedVariantIndex, l = this.selectedSizeKey;
    if (this.selectedVariantIndex = e, this.selectedSizeKey = t, this.bottomNav) {
      this.bottomNav.setActiveVariant(this.selectedVariantIndex);
      const B = (D = (L = this.modelData) == null ? void 0 : L.options) == null ? void 0 : D[this.selectedVariantIndex], k = {};
      let F = null;
      B != null && B.sizes && Array.isArray(B.sizes) && B.sizes.forEach((Y, G) => {
        if (Y.label && Y.width && Y.height) {
          const Q = Y.label.toLowerCase();
          k[Q] = {
            width: Y.width,
            height: Y.height,
            depth: Y.depth || "",
            label: Y.label
          }, G === 0 && (F = Q);
        }
      }), this.bottomNav.sizePanelComponent.updateSizes(
        k,
        this.selectedVariantIndex,
        this.selectedSizeKey || F
      ), this.bottomNav.updateNavButtonsVisibility();
    }
    const h = this.modelData.options[this.selectedVariantIndex];
    if (!h) {
      p.error(
        `_handleVariantSizeSelectionConfirmed: Selected variant at index ${this.selectedVariantIndex} not found.`
      );
      return;
    }
    const b = this.modelViewerElement ? (X = te.getElement()) == null ? void 0 : X.src : null, _ = b !== h.url;
    let E = n !== this.selectedVariantIndex, A = l !== this.selectedSizeKey;
    if (E || _)
      p.debug(
        `Variant changed (or src mismatch). Old Index: ${n}, New Index: ${this.selectedVariantIndex}. Current MV src: ${b}, New variant src: ${h.url}. Reloading model.`
      ), this.isModelLoaded = !1, this.progressModal.isVisible || this.progressModal.show(), this.progressModal.updateText("Loading new style..."), te.setVariant(h).then(() => {
        p.debug(
          `ModelViewerService: Variant source set for index ${this.selectedVariantIndex}. Waiting for 'load' event.`
        );
      }).catch((B) => {
        p.error(
          `Error setting new variant ${this.selectedVariantIndex} after modal confirmation:`,
          B
        ), this.progressModal.hide();
      });
    else if (A) {
      if (p.debug(
        `Only size changed from ${l} to ${this.selectedSizeKey} for variant ${this.selectedVariantIndex}.`
      ), this.isModelLoaded) {
        const B = this.modelData.options[this.selectedVariantIndex], k = (I = B == null ? void 0 : B.sizes) == null ? void 0 : I.find(
          (F) => {
            var Y;
            return ((Y = F.label) == null ? void 0 : Y.toLowerCase()) === this.selectedSizeKey;
          }
        );
        if (k && typeof k.width == "string" && typeof k.height == "string") {
          const F = {
            width: k.width,
            height: k.height,
            depth: typeof k.depth == "string" ? k.depth : "",
            label: k.label
          };
          p.debug(
            `Applying scale for newly selected size via _handleVariantSizeSelectionConfirmed: ${this.selectedSizeKey}`,
            F
          );
          const Y = te.calculateScale(F);
          Y && te.applyScale(Y);
        } else
          p.warn(
            `Selected size key '${this.selectedSizeKey}' not found or invalid data for variant ${this.selectedVariantIndex}. Scale not applied.`
          );
      }
    } else
      this.isModelLoaded && this.progressModal.hide();
  }
  async _showStepsOrActivateAR() {
    var e, t, n;
    if (!this.modelViewerElement) {
      p.error(
        "Cannot show steps/activate AR: model-viewer element reference is missing."
      ), this.userClickedAR = !1;
      return;
    }
    try {
      const l = (t = (e = this.modelData) == null ? void 0 : e.options) == null ? void 0 : t[this.selectedVariantIndex], h = (l == null ? void 0 : l.placement) || ((n = this.modelData) == null ? void 0 : n.placement) || "floor", b = (l == null ? void 0 : l.posterFileUrl) || null;
      p.debug(
        `AR activation possible. Showing Steps modal. Placement: ${h}`
      ), this.stepsModal.show(
        h,
        b,
        this.modelData.steps,
        this.modelData,
        this.selectedVariantIndex,
        this.selectedSizeKey
      );
    } catch (l) {
      alert("Error during AR check or steps display:", l);
    }
  }
  async _renderBaseTemplate() {
    var l;
    const e = ((l = this.modelData) == null ? void 0 : l.mode) || "popup";
    let t = "";
    e === "none" ? t = Dt(
      this.modelData,
      this.hasAttribute("fullWidth")
    ) : e === "popup" ? t = Pt(
      this.modelData,
      this.hasAttribute("fullWidth")
    ) : t = Ze(
      this.modelData,
      this.hasAttribute("fullWidth")
    ), this.shadowRoot.innerHTML = "", this._loadBaseStyles();
    const n = document.createRange().createContextualFragment(t);
    this.shadowRoot.appendChild(n.cloneNode(!0)), this.modelViewerElement = this.shadowRoot.querySelector("model-viewer"), this.modelViewerElement, this.arTriggerButton = null, e === "inpage" ? this.arTriggerButton = this.shadowRoot.querySelector(
      ".ardisplay-inpage-button"
    ) : e === "popup" ? this.arTriggerButton = this.shadowRoot.querySelector(
      ".ardisplay-view-3d-button"
    ) : this.arTriggerButton = this.shadowRoot.querySelector(
      ".ardisplay-qr-code-button"
    ), this.arTriggerButton && this.shadowRoot.querySelectorAll(
      ".ardisplay-inpage-button, .ardisplay-view-3d-button, .ardisplay-qr-code-button"
    ).forEach((h) => {
      h !== this.arTriggerButton ? h.style.display = "none" : h.style.display = "";
    });
  }
  _initializeUIComponents(e = !1) {
    var b, _, E, A, L, D, X;
    const t = e ? document.querySelector(".model-viewer-popup-container model-viewer") : this.modelViewerElement;
    if (!this.modelData)
      return;
    if (!t && !e && this.modelData.mode !== "popup") {
      p.warn(
        `Skipping UI component initialization: Target viewer element not found for mode ${this.modelData.mode}.`
      );
      return;
    }
    if (!t && e)
      return;
    if ((this.modelData.addToCartUrl || "").trim().length > 0) {
      this.cartButton || (this.cartButton = new Lt(this.modelData));
      const I = this.cartButton.getElement();
      I && I.parentNode !== t && t.appendChild(I);
    } else this.cartButton && ((b = this.cartButton.getElement()) == null || b.remove(), this.cartButton = null);
    const l = this.modelData.options && this.modelData.options.length > 1, h = ((A = (E = (_ = this.modelData.options) == null ? void 0 : _[0]) == null ? void 0 : E.sizes) == null ? void 0 : A.length) > 1;
    if (l || h) {
      this.bottomNav ? this.bottomNav.updateModelData(this.modelData) : this.bottomNav = new It(this.modelData, {
        onSizeSelect: this._handleSizeSelect.bind(this),
        onVariantSelect: this._handleVariantSelect.bind(this),
        onShareClick: this._handleShareClick.bind(this)
      });
      const I = this.bottomNav.getElement(), B = this.bottomNav.getPanelElements();
      t && I && B && (B.sizePanel && B.sizePanel.parentNode !== t && t.appendChild(B.sizePanel), B.variantPanel && B.variantPanel.parentNode !== t && t.appendChild(B.variantPanel), I.parentNode !== t && (t.appendChild(I), this.bottomNav.addOutsideClickListener()), we(I), this.bottomNav.updateNavButtonsVisibility());
    } else
      this.bottomNav && (this.bottomNav.removeOutsideClickListener(), (L = this.bottomNav.getElement()) == null || L.remove(), (D = this.bottomNav.getPanelElements().sizePanel) == null || D.remove(), (X = this.bottomNav.getPanelElements().variantPanel) == null || X.remove(), this.bottomNav = null);
  }
  _handleSizeSelect(e, t, n) {
    if (p.debug(
      `ARDisplayViewer: Size selection callback received - Key: ${t}, For Variant Index: ${n}. Currently selected: ${this.selectedVariantIndex}.`
    ), n !== this.selectedVariantIndex) {
      p.warn(
        `Ignoring size selection for variant ${n} because the currently active variant is ${this.selectedVariantIndex}. This is expected during variant transitions.`
      );
      return;
    }
    if (!this.isModelLoaded)
      return;
    const l = te.calculateScale(e);
    l ? te.applyScale(l) : p.error(
      `Failed to calculate scale for size key '${t}' with data:`,
      e
    );
  }
  _handleVariantSelect(e, t) {
    p.debug(
      `ARDisplayViewer: Variant selection callback received - Index: ${t}, Name: ${(e == null ? void 0 : e.name) || "N/A"}.`
    ), !(t === this.selectedVariantIndex && this.isModelLoaded) && (t === this.selectedVariantIndex && !this.isModelLoaded || (this.selectedVariantIndex = t, this.isModelLoaded = !1, this.userClickedAR = !1, this.bottomNav && typeof this.bottomNav.setActiveVariant == "function" && this.bottomNav.setActiveVariant(t), te.setVariant(e).then(() => {
    }).catch((n) => {
      p.error(
        `Failed to set variant ${t} in ModelViewerService:`,
        n
      );
    })));
  }
  _handleShareClick() {
    var l, h, b, _;
    const e = (h = (l = this.modelData) == null ? void 0 : l.options) == null ? void 0 : h[this.selectedVariantIndex], t = (e == null ? void 0 : e.name) || ((b = this.modelData) == null ? void 0 : b.name) || "3D Model", n = ((_ = this.modelData) == null ? void 0 : _.productUrl) || window.location.href;
    if (navigator.share && this.modelData) {
      const E = {
        title: `Check out ${t}`,
        text: `View ${t} in 3D or AR!`,
        url: n
      };
      navigator.share(E).then(
        () => p.debug("Content shared successfully via Web Share API.")
      ).catch((A) => {
        A.name === "AbortError" || p.error("Web Share API failed:", A);
      });
    } else
      navigator.clipboard && navigator.clipboard.writeText(n).then(() => {
      }).catch((E) => {
        p.error("Failed to copy share URL to clipboard:", E);
      });
  }
  _applyInitialSize() {
    if (!te.isModelLoaded())
      return;
    if (!this.modelData || !this.modelData.options || !this.modelData.options[this.selectedVariantIndex]) {
      p.warn(
        `Cannot apply initial size: Missing modelData or data for selected variant index ${this.selectedVariantIndex}. Applying default scale.`
      ), te.applyScale({ scaleX: 1, scaleY: 1, scaleZ: 1 });
      return;
    }
    const e = this.modelData.options[this.selectedVariantIndex], t = e == null ? void 0 : e.sizes;
    if (p.debug(
      `Applying initial size for variant index: ${this.selectedVariantIndex}, Name: ${(e == null ? void 0 : e.name) || "N/A"}`
    ), t && t.length > 0) {
      const n = t[0];
      if (n && typeof n.width == "string" && typeof n.height == "string") {
        const l = {
          width: n.width,
          height: n.height,
          depth: typeof n.depth == "string" ? n.depth : ""
        }, h = te.calculateScale(l);
        h ? te.applyScale(h) : te.applyScale({ scaleX: 1, scaleY: 1, scaleZ: 1 });
      } else
        te.applyScale({ scaleX: 1, scaleY: 1, scaleZ: 1 });
    } else
      p.debug(
        `No specific sizes defined for variant ${this.selectedVariantIndex}. Applying default scale (1, 1, 1).`
      ), te.applyScale({ scaleX: 1, scaleY: 1, scaleZ: 1 });
  }
  _showQrModal() {
    var t, n;
    if (!this.qrModal) {
      p.error("QR Modal instance is not available.");
      return;
    }
    const e = Oe.getARFailureFallbackUrl(
      (t = this.modelData) == null ? void 0 : t.modelId
    );
    e && this.modelData ? this.qrModal.show(this.modelData, e) : p.error(
      "Cannot show QR Modal: Missing fallback URL or essential model data.",
      {
        hasFallbackUrl: !!e,
        hasModelData: !!this.modelData,
        modelId: (n = this.modelData) == null ? void 0 : n.modelId
      }
    );
  }
  disconnectedCallback() {
    this.arTriggerButton && this._boundHandleArButtonClick && (this.arTriggerButton.removeEventListener(
      "click",
      this._boundHandleArButtonClick
    ), this._boundHandleArButtonClick = null), this.bottomNav && this.bottomNav.removeOutsideClickListener(), te.cleanup(), this.progressModal.hide(), this.qrModal.hide(), this.stepsModal.hide(), this.shadowRoot.innerHTML = "", this.modelData = null, this.selectedVariantIndex = 0, this.isInitialized = !1, this.isModelLoaded = !1, this.userClickedAR = !1, this.modelViewerElement = null, this.arTriggerButton = null, this.bottomNav = null, this.cartButton = null;
  }
  attributeChangedCallback(e, t, n) {
    if (!(!this.isInitialized || t === n))
      switch (e) {
        case "ar-btn-config":
          this._updateArBtnConfig(n);
          break;
        case "src":
        case "shopify-src":
          this.disconnectedCallback(), this.connectedCallback();
          break;
        case "enabled":
          this.disconnectedCallback(), this.connectedCallback();
          break;
      }
  }
}
customElements.get("ardisplay-viewer") || customElements.define("ardisplay-viewer", Ot);
